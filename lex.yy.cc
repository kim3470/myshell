#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 18
#define YY_END_OF_BUFFER 19
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[523] =
    {   0,
        0,    0,   19,   17,    2,    1,   17,   17,   10,   17,
       17,    4,    9,   17,   17,   17,    3,   11,   17,   17,
        0,   17,   17,    0,   15,   17,    0,   17,   17,   17,
        0,   17,    0,   17,    0,   16,   17,    8,    7,    6,
       17,   17,   17,   17,   17,    0,   17,    0,   17,   13,
       17,   11,   11,   11,   11,   11,   15,   17,   15,    0,
       17,   17,   15,   17,   17,   17,    0,   17,    0,   13,
       17,   17,    0,   17,    0,   17,    0,   16,   17,    0,
       16,   17,   17,   17,   16,   17,    5,   17,   13,   17,
        0,   13,   17,   17,   17,   17,   13,   17,   11,   11,

       11,   11,   11,   11,   11,   17,    0,   15,   17,    0,
       17,    0,   15,   17,   13,   17,    0,   13,   17,   17,
       17,   13,   17,   12,   12,    0,   12,   17,   17,   17,
       17,   12,   17,    0,   17,    0,   16,   17,    0,   16,
       17,   17,   17,   17,    0,   17,    0,   17,   13,    0,
       17,   13,   17,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   15,   12,   15,    0,   12,   17,   17,   15,
       17,   17,   12,   17,   15,   17,   17,    0,   17,    0,
       13,   17,    0,   13,   17,   12,   12,   12,   12,   12,
       12,   17,   12,   12,   16,   12,    0,   16,   12,   17,

       17,   17,   16,   17,   12,   17,   16,   17,   12,   13,
       12,    0,   13,   12,   17,   17,   17,   17,   13,   12,
       17,   17,   13,   17,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   15,   17,   12,   12,   13,   12,
        0,   13,   12,   17,   17,   17,   13,   17,   12,   17,
       13,   17,   12,   12,   12,   12,   12,   17,   17,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   16,   17,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   17,   13,   12,   14,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       12,   12,   12,   17,   15,   17,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   13,
       17,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   17,   16,   17,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   17,   17,
       13,   12,   12,   12,   12,   14,   14,   14,   14,   14,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   17,   13,   17,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   14,   14,   14,   14,
       14,   14,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   14,   14,   14,   14,   14,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,   12,   12,   12,
       12,   12,   12,   12,   14,   12,   14,   14,   14,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    8,    9,
       10,    1,    1,    1,    1,    1,   11,    1,    1,   12,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   13,
        1,   14,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   15,    1,    1,    1,   16,    1,    1,   17,    1,

       18,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       19,    1,    1,   20,   21,    1,   22,    1,    1,    1,
        1,    1,   23,   24,   25,   26,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[27] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    1,    1,    1,
        1,    1,    5,    5,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    1,    1
    } ;

static const flex_int16_t yy_base[735] =
    {   0,
        0,    0,  342,   21, 7920, 7920,   44,   63,  335,   86,
       24,  331,   23,  109,  132,   33,  330,  151,   30,  326,
      328,  174,  197,  325,   31,  305,  220,  225,  248,  271,
       37,  295,  317,  300,  318,   32,  325,  315,  312,   25,
       52,  302,  307,    0,  348,  299,  291,  371,  386,    0,
       57,  405,  290,   56,  424,  447, 7920,  471,  306,  496,
        0,  518,   72,  288,  541,  564,  297,  283,  587,    0,
      596,  619,  280,    0,  643,  667,  691, 7920,  716,  741,
      298,    0,  763,  277,   73,  786,  292,  809,  278,  833,
      858,  270,    0,  880,  269,  903,    0,   82,  927,  948,

      285,  966,  267,    0,  989,  264,   60,    0,  263, 1012,
     1037, 1062,  272, 1086,  273, 1110, 1135,  259,    0, 1157,
      258,    0, 1180, 1199,    0, 1222,  274,    0, 1246,    0,
     1270, 1290,  254,   81,  251, 1313,    0, 1338, 1363,  256,
     1387,  255, 1410,  244,  101,  243, 1433, 1458,  242, 1483,
     1507, 1530,  112,  241,  240, 1553, 1577, 1601, 1625,   91,
     1649, 1673,  239,  123, 1696,  235, 1720, 1726, 1751,    0,
        0, 1776, 1801, 1824,  244, 1847, 1871,  127,    0, 1896,
        0, 1921, 1946, 1970, 1993,    0,  234,  250, 2016,    0,
       97, 2039, 2058, 2081,  228,  147,  226, 2104, 2128, 2136,

     2161,    0,    0, 2186, 2211, 2234,  233, 2257, 2280,  115,
      157, 2303, 2327, 2351, 2367, 2392,    0, 2417,    0, 2442,
     2465, 2488, 2511, 2530, 2549, 2572, 2596,  157, 2621, 2642,
        0,    0, 2665, 2685, 2708, 2732,    0, 2755, 2778, 2783,
      139,    0,  241, 2806, 2828, 2852, 2876, 2899,  157,  167,
     2922, 2946, 2970, 2980, 3005,    0,    0, 3030, 3055, 3078,
     3101, 3124, 3147,    0,  223, 3171, 3194, 3218, 3242, 3261,
     3279, 3302, 3325, 3348, 3371,    0, 3378,  182,    0, 3401,
      239,    0, 3423, 3447, 3470, 3493, 3516, 3531,  221,  181,
      189, 3554,  220, 3576, 3600, 3624, 3645, 3664, 3683,  202,

     3702, 3725, 3748,  236, 3768,  235, 3786, 3810, 3835,    0,
     3858, 3881, 3904, 3928,    0, 3952, 3976, 3999,    0, 4022,
     4045, 4068, 4091,  214, 4100,  190,  205, 4123,  213, 4145,
     4169, 4193, 4216, 4240, 4264, 4288, 4312,    0, 4336, 4360,
     4385, 4408,    0, 4431, 4454, 4478,    0, 4502, 4526, 4549,
        0, 4572, 4596, 4621, 4644, 4667,  212, 4690, 4714, 4738,
     4762, 4786, 4809, 4832,    0, 4851,  230, 4870,  222, 4893,
     4917, 4938, 4957, 4980,  147, 5003, 5027, 5052,    0,    0,
     5077, 5102, 5127, 5151, 5175,    0, 5198, 5222, 5247, 5270,
      197, 5293, 5316, 5340, 5364, 5388, 5412, 5435,    0, 5458,

     5477,  212,    0,    0, 5500, 5520, 5544,    0, 5569,    0,
     5594, 5619, 5643, 5667,    0, 5690, 5714,    0, 5739, 5764,
        0, 5789,    0,    0, 5813,    0,  202, 5836,  173, 5856,
      172, 5879,  149,  129, 5902, 5926, 5950, 5974,    0, 5998,
        0, 6022, 6045, 6051,    0,    0, 6077, 6102,  125,  117,
     6125,  107, 6150,    0,    0,    0,    0, 6175, 6198, 6221,
        0,    0,    0,    0, 6228, 6251, 6274,    0,    0,    0,
        0, 6289, 6312,    0, 6336, 6360, 6384, 6404,  208, 6423,
        0,    0, 6446, 6466, 6489,  113, 6513, 6536,   87,   84,
       83,    0, 6545, 6564, 6587,  101,    0,    0, 6611, 6631,

        0,   75,   77, 6654,  210, 6677,    0,   51, 6701, 6724,
     6748,    0, 6772, 6796, 6820,    0,   67,    0,    0, 6844,
        0, 7920, 6869, 6874, 6879, 6884, 6889, 6894, 6899, 6904,
     6909, 6914, 6919, 6924, 6929, 6934, 6939,   63, 6944, 6949,
     6954, 6959, 6964, 6969, 6974, 6979, 6984, 6989, 6994, 6999,
     7004, 7009, 7014, 7019, 7024, 7029, 7034,   43, 7039, 7044,
     7049, 7054, 7059, 7064, 7069, 7074, 7079, 7084, 7089, 7094,
     7099, 7104, 7109, 7114, 7119, 7124, 7129, 7134, 7139, 7144,
     7149, 7154, 7159, 7164, 7169, 7174, 7179, 7184, 7189, 7194,
     7199, 7204, 7209, 7214, 7219, 7224, 7229, 7234, 7239, 7244,

     7249, 7254, 7259, 7264, 7269, 7274, 7279, 7284, 7289, 7294,
     7299, 7304, 7309, 7314, 7319, 7324, 7329, 7334, 7339, 7344,
     7349, 7354, 7359, 7364, 7369, 7374, 7379, 7384, 7389, 7394,
     7399, 7404, 7409, 7414, 7419, 7424, 7429, 7434, 7439, 7444,
     7449, 7454, 7459, 7464, 7469, 7474, 7479, 7484, 7489, 7494,
     7499, 7504, 7509, 7514, 7519, 7524, 7529, 7534, 7539, 7544,
     7549, 7554, 7559, 7564, 7569, 7574, 7579, 7584, 7589, 7594,
     7599, 7604, 7609, 7614, 7619, 7624, 7629, 7634, 7639, 7644,
     7649, 7654, 7659, 7664, 7669, 7674, 7679, 7684, 7689, 7694,
     7699, 7704, 7709, 7714, 7719, 7724, 7729, 7734, 7739, 7744,

     7749, 7754, 7759, 7764, 7769, 7774, 7779, 7784, 7789, 7794,
     7799, 7804, 7809, 7814, 7819, 7824, 7829, 7834, 7839, 7844,
     7849, 7854, 7859, 7864, 7869, 7874, 7879, 7884, 7889, 7894,
     7899, 7904, 7909, 7914
    } ;

static const flex_int16_t yy_def[735] =
    {   0,
      522,    1,  522,  523,  522,  522,  524,  523,  525,  526,
        8,  525,  525,  527,  528,    8,  525,  529,    8,    8,
      525,  527,  524,  530,    8,   23,  531,  532,  533,  534,
      525,  526,  535,   32,  536,    8,  537,  525,  525,  525,
        8,  538,    8,   22,  528,  539,   45,  540,  541,   45,
        8,  529,   52,  542,  543,  544,  522,  522,  525,  531,
       23,  545,    8,   23,  532,  533,  546,   66,  547,   66,
      548,  534,  549,   72,  550,  551,  550,  522,  522,  536,
      525,   32,  552,   32,    8,  537,  525,  553,  539,  522,
      540,   91,   45,  554,   45,  541,   45,    8,  522,  542,

      555,  543,  102,  102,  544,   58,  556,   72,   58,  557,
      522,  557,  558,  559,  546,  522,  547,  117,   66,  560,
       66,   66,  548,  561,  562,  550,  563,   72,  564,   72,
      551,  561,   79,  565,   79,  566,   72,  522,  566,  558,
      567,  558,  553,   90,  568,   90,  569,  522,   90,  569,
      570,  571,    8,   99,   99,  572,  573,  574,  572,  575,
      573,  576,  577,  578,  550,  112,  579,  522,  580,   72,
      168,  522,  576,  581,  558,  582,  522,  583,  177,  584,
      177,  522,  584,  585,  586,  132,  132,  587,  588,  589,
      587,  590,  591,  592,  577,  593,  139,  550,  594,  522,

      595,  200,   72,  522,  592,  596,  558,  597,  598,  599,
      600,  601,  601,  602,  522,  603,  215,  522,  215,  598,
      604,  605,  604,  606,  607,  608,  609,  610,  522,  611,
      229,  229,  612,  611,  609,  613,  132,  613,  614,  615,
      616,  589,  587,  614,  617,  618,  619,  620,  621,  622,
      623,  623,  624,  522,  625,  254,  254,  522,  620,  626,
      626,  627,  628,  132,  132,  629,  630,  617,  631,  632,
      632,  633,  634,  634,  635,  132,  636,  637,  589,  635,
      587,  268,  638,  639,  640,  640,  641,  642,  286,  643,
      643,  641,  292,  644,  645,  646,  647,  648,  648,  649,

      650,  651,  652,  653,  649,  653,  650,  522,  654,  132,
      654,  655,  656,  657,  268,  658,  659,  659,  271,  660,
      661,  661,  662,  322,  663,  664,  664,  662,  328,  665,
      666,  667,  668,  668,  669,  670,  669,  271,  671,  522,
      672,  672,  132,  673,  674,  675,  268,  676,  677,  677,
      271,  678,  522,  679,  679,  680,  355,  681,  682,  683,
      682,  684,  684,  685,  363,  686,  687,  686,  688,  689,
      522,  690,  690,  691,  692,  693,  694,  522,  334,  378,
      695,  522,  669,  695,  696,  271,  697,  522,  698,  698,
      390,  699,  700,  701,  701,  702,  703,  703,  398,  704,

      705,  706,  334,  334,  707,  705,  522,  407,  708,  334,
      522,  708,  669,  709,  271,  710,  522,  417,  711,  522,
      417,  711,  422,  363,  685,  363,  687,  712,  688,  686,
      430,  689,  371,  371,  693,  694,  713,  714,  435,  714,
      436,  715,  716,  522,  334,  444,  522,  715,  388,  388,
      700,  388,  522,  451,  451,  398,  398,  704,  717,  718,
      407,  407,  334,  411,  717,  719,  720,  417,  417,  420,
      417,  719,  712,  473,  721,  722,  721,  723,  724,  725,
      436,  436,  713,  725,  714,  726,  727,  728,  388,  388,
      388,  453,  727,  729,  721,  730,  473,  473,  722,  729,

      500,  500,  730,  731,  730,  732,  500,  500,  731,  733,
      732,  511,  733,  734,  733,  500,  730,  511,  511,  734,
      500,    0,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522
    } ;

static const flex_int16_t yy_nxt[7947] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,    4,    4,
        4,   11,   12,   13,   14,   15,    4,    4,    4,    4,
       16,    4,    4,   17,    4,   18,   20,   21,   31,   39,
       31,   87,   19,   21,   21,   22,   40,   38,   19,   19,
       19,   19,   31,   42,   21,   24,   19,   24,   25,   26,
       27,   51,   19,   19,   19,   19,   27,   27,   28,   77,
       19,  100,   73,   42,  163,   19,  101,   27,   20,   21,
      101,   29,  505,  506,   19,   21,   21,   22,   98,   19,
       19,   19,  505,   73,  164,   30,   21,   33,  195,   33,
       19,   34,   35,   36,   19,   19,  160,  506,   35,   35,

       37,  153,  191,   73,   19,  196,  505,  487,  487,   35,
       42,  487,   42,  235,   43,   19,  210,   73,  375,  267,
       19,   19,   19,   44,   24,  211,   24,  242,  224,   73,
      210,  487,   19,   46,   19,   46,  249,   47,   48,  211,
       24,  487,   24,  242,   48,   48,   49,   50,   33,  487,
       33,  250,  375,  478,  279,   48,   53,   54,   46,   73,
       46,   55,  305,   54,   54,   56,  249,  306,   67,  438,
       67,  306,  291,  478,   54,   42,  327,   42,  429,   43,
       19,  250,   46,   33,   46,   33,   19,   19,   44,  279,
       46,   67,   46,   67,  428,  477,  291,   19,   24,  327,

       24,   25,   26,   27,  291,  522,   67,  305,   67,   27,
       27,   28,  306,  305,  327,  505,  306,  191,  306,  321,
       27,   24,  306,   24,   59,   60,   62,  429,   62,   63,
       64,   23,  510,  367,  285,  323,  321,   23,   23,   65,
      375,  375,  287,  285,  191,  263,  191,   88,   23,   67,
      199,   67,  125,   68,   69,  191,  263,   70,   88,  167,
       69,   69,   71,  125,  225,  225,  209,  209,  209,   88,
       88,   69,   73,   73,   73,  194,   74,   75,  194,  191,
      116,   69,  115,   75,   75,   76,   88,  162,  162,   55,
      160,   90,   48,   89,   75,   19,   33,   31,   33,   79,

       34,   35,   36,   31,  125,  116,  115,   35,   35,   37,
       58,   31,   99,   90,   89,   19,   88,   31,   35,   33,
       31,   33,   79,   80,   78,   81,   83,   58,   83,   57,
       84,   32,   85,   31,   19,   31,   31,   32,   32,   86,
       31,  522,  522,  522,  522,  522,  522,  522,   32,   46,
      522,   46,  522,   47,   48,  522,  522,  522,  522,  522,
       48,   48,   49,   50,  522,  522,  522,  522,  522,  522,
      522,   48,   46,  522,   46,  522,   91,  522,  522,  522,
      522,  522,  522,  522,  522,  522,   92,   94,  522,   94,
      522,   95,   45,  522,  522,  522,  522,  522,   45,   45,

       96,   97,  522,  522,  522,  522,  522,  522,  522,   45,
       53,   54,  522,  522,  522,   55,  522,   54,   54,   56,
      522,  522,  522,  522,  522,  522,  522,  522,   54,  102,
      101,  522,  522,  522,  522,  522,  101,  101,   56,  522,
      522,  522,  522,  522,  522,  522,  522,  101,   42,  522,
       42,  522,  104,   55,  522,  522,  522,  522,  522,   55,
       55,  105,  522,  522,  522,  522,  522,  522,  522,  522,
       55,  106,  107,   73,  107,  108,  109,  110,  106,  106,
      106,  106,  106,  110,  110,  111,  106,  106,  106,  106,
      106,  106,  106,  106,  110,   23,  106,   24,  522,   24,

       59,   60,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  112,   24,
      522,   24,  113,  522,   24,  522,  522,  522,  522,  522,
       24,   24,  114,  522,  522,  522,  522,  522,  522,  522,
      522,   24,   62,  522,   62,   63,   64,   23,  522,  522,
      522,  522,  522,   23,   23,   65,  522,  522,  522,  522,
      522,  522,  522,  522,   23,   67,  522,   67,  522,   68,
       69,  522,  522,   70,  522,  522,   69,   69,   71,  522,
      522,  522,  522,  522,  522,  522,  522,   69,   67,  522,
       67,  522,  117,  522,  522,  522,  118,  120,  522,  120,

      522,  121,   66,  522,  522,  122,  522,  522,   66,   66,
      123,  522,  522,  522,  522,  522,  522,  522,  522,   66,
       73,   73,   73,  522,   74,   75,  522,  522,  522,  522,
      522,   75,   75,   76,  522,  522,  522,  522,  522,  522,
      522,  522,   75,  124,   73,   73,   73,  522,  126,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  127,  129,   73,
      129,  522,  130,   72,  522,  522,  522,  522,  522,   72,
       72,  131,  522,  522,  522,  522,  522,  522,  522,  522,
       72,  132,   73,   73,   73,  522,  126,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,   21,  133,  134,   73,  134,
      133,  135,  136,  137,  133,  133,  133,  133,  136,  136,
      138,  133,  133,  133,  133,  133,  133,  133,  133,  136,
       32,  133,   33,  522,   33,  522,   80,  522,   81,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  139,   33,  522,   33,  522,  522,   33,
      140,  522,  522,  522,  522,   33,   33,  141,  522,  522,
      522,  522,  522,  522,  522,  522,   33,   83,  522,   83,
      522,   84,   32,   85,  522,  522,  522,  522,   32,   32,

       86,  522,  522,  522,  522,  522,  522,  522,  522,   32,
       42,  522,   42,  522,  522,   42,  522,  522,  522,  522,
      522,   42,   42,  143,  522,  522,  522,  522,  522,  522,
      522,  522,   42,  144,  145,   73,  145,  144,  146,  147,
      144,  144,  144,  144,  144,  147,  147,  148,  149,  144,
      144,  144,  144,  144,  144,  144,  147,   45,  144,   46,
      522,   46,  522,   91,  522,  522,  522,  522,  522,  522,
      522,  522,  522,   92,  522,  522,  522,  522,  522,  522,
      150,   46,  522,   46,  522,  522,   46,  522,  522,  522,
      522,  522,   46,   46,  151,  152,  522,  522,  522,  522,

      522,  522,  522,   46,   94,  522,   94,  522,   95,   45,
      522,  522,  522,  522,  522,   45,   45,   96,   97,  522,
      522,  522,  522,  522,  522,  522,   45,  154,   73,   73,
       73,  154,  155,  156,  154,  154,  154,  157,  154,  156,
      156,  158,  154,  154,  154,  154,  154,  154,  154,  154,
      156,   52,  154,  100,  522,  522,  522,  522,  101,  522,
      522,  522,  101,  522,  522,  522,  522,  522,  522,  522,
      159,  102,  101,  522,  522,  522,  522,  522,  101,  101,
       56,  522,  522,  522,  522,  522,  522,  522,  161,  101,
       42,  522,   42,  522,  104,   55,  522,  522,  522,  522,

      522,   55,   55,  105,  522,  522,  522,  522,  522,  522,
      522,  522,   55,  107,   73,  107,  165,  166,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  167,  168,  169,   73,
      169,  170,  171,  106,  168,  168,  168,  168,  168,  106,
      106,  172,  168,  168,  168,  168,  168,  168,  168,  168,
      106,  173,  168,  107,   73,  107,  165,  166,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,   27,   62,  522,   62,
      175,  522,   62,  522,  522,  522,  522,  522,   62,   62,

      176,  522,  522,  522,  522,  522,  522,  522,  522,   62,
      177,  178,   73,  178,  177,  179,  180,  177,  177,  181,
      177,  177,  180,  180,  182,  177,  177,  177,  177,  177,
      177,  177,  177,  180,   66,  177,   67,  522,   67,  522,
      117,  522,  522,  522,  118,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  183,   67,  522,
       67,  522,  522,   67,  522,  522,  184,  522,  522,   67,
       67,  185,  522,  522,  522,  522,  522,  522,  522,  522,
       67,  120,  522,  120,  522,  121,   66,  522,  522,  122,
      522,  522,   66,   66,  123,  522,  522,  522,  522,  522,

      522,  522,  522,   66,  187,  188,  522,  522,  522,  522,
      522,  188,  188,  189,  522,  522,  522,  522,  522,  522,
      522,  522,  188,   73,   73,   73,  522,  126,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  127,   73,   73,   73,
      522,  522,   73,  522,  522,  522,  522,  522,   73,   73,
      192,  522,  522,  522,  522,  522,  522,  522,  522,   73,
      193,  129,   73,  129,  522,  130,   72,  522,  522,  522,
      522,  522,   72,   72,  131,  522,  522,  522,  522,  522,
      522,  522,  522,   72,  132,  187,  188,  522,  522,  522,

      522,  522,  188,  188,  189,  522,  522,  522,  522,  522,
      522,  522,  522,  188,  134,   73,  134,  522,  197,  522,
      198,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  199,  200,  201,
       73,  201,  200,  202,  133,  203,  200,  200,  200,  200,
      133,  133,  204,  200,  200,  200,  200,  200,  200,  200,
      200,  133,  205,  200,  134,   73,  134,  522,  197,  522,
      198,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,   35,   83,  522,
       83,  522,  522,   83,  207,  522,  522,  522,  522,   83,

       83,  208,  522,  522,  522,  522,  522,  522,  522,  522,
       83,   42,  522,   42,  522,  522,   42,  522,  522,  522,
      522,  522,   42,   42,  143,  522,  522,  522,  522,  522,
      522,  522,  522,   42,  145,   73,  145,  522,  212,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  213,  522,
      522,  522,  522,  522,  522,  522,  522,  214,  215,  216,
       73,  216,  215,  217,  144,  215,  215,  215,  215,  215,
      144,  144,  218,  219,  215,  215,  215,  215,  215,  215,
      215,  144,  220,  215,  145,   73,  145,  522,  212,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  213,  522,

      522,  522,  522,  522,  522,  522,  522,   48,   94,  522,
       94,  522,  522,   94,  522,  522,  522,  522,  522,   94,
       94,  222,  223,  522,  522,  522,  522,  522,  522,  522,
       94,   46,  522,   46,  522,  522,   46,  522,  522,  522,
      522,  522,   46,   46,  151,  152,  522,  522,  522,  522,
      522,  522,  522,   46,   73,   73,   73,  522,  226,  522,
      522,  522,  522,  227,  522,  522,  522,  227,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  228,   73,   73,
       73,  522,  229,  227,  522,  522,  522,  522,  522,  227,
      227,  158,  522,  522,  522,  522,  522,  522,  522,  522,

      227,  230,  129,   73,  129,  522,  232,  157,  522,  522,
      522,  522,  522,  157,  157,  233,  522,  522,  522,  522,
      522,  522,  522,  522,  157,  234,   73,   73,   73,  522,
      226,  522,  522,  522,  522,  227,  522,  522,  522,  227,
      522,  522,  522,  522,  522,  522,  522,  522,  522,   54,
       73,   73,   73,  522,  229,  227,  522,  522,  522,  522,
      522,  227,  227,  158,  522,  522,  522,  522,  522,  522,
      522,  522,  227,   55,   24,  522,   24,  237,  238,  239,
      522,  522,  522,  522,  522,  239,  239,  240,  522,  522,
      522,  522,  522,  522,  522,  522,  239,   73,   73,   73,

      522,  126,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      127,   24,  522,   24,  243,  244,  106,  107,   73,  107,
      108,  109,  110,  106,  106,  106,  106,  106,  110,  110,
      111,  106,  106,  106,  106,  106,  106,  106,  106,  110,
      162,  106,  107,   73,  107,  245,  522,  107,  522,  522,
      522,  522,  522,  107,  107,  246,  522,  522,  522,  522,
      522,  522,  522,  522,  107,  247,  168,  169,   73,  169,
      170,  171,  106,  168,  168,  168,  168,  168,  106,  106,
      172,  168,  168,  168,  168,  168,  168,  168,  168,  106,

      173,  168,   24,  522,   24,  237,  238,  239,  522,  522,
      522,  522,  522,  239,  239,  240,  522,  522,  522,  522,
      522,  522,  522,  522,  239,   24,  522,   24,  113,  522,
       24,  522,  522,  522,  522,  522,   24,   24,  114,  522,
      522,  522,  522,  522,  522,  522,  522,   24,   62,  522,
       62,  175,  522,   62,  522,  522,  522,  522,  522,   62,
       62,  176,  522,  522,  522,  522,  522,  522,  522,  522,
       62,  177,  178,   73,  178,  177,  179,  180,  177,  177,
      181,  177,  177,  180,  180,  182,  177,  177,  177,  177,
      177,  177,  177,  177,  180,  248,  177,  178,   73,  178,

      522,  251,  522,  522,  522,  252,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      253,  254,  255,   73,  255,  254,  256,  177,  254,  254,
      257,  254,  254,  177,  177,  258,  254,  254,  254,  254,
      254,  254,  254,  254,  177,  259,  254,  178,   73,  178,
      522,  251,  522,  522,  522,  252,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
       69,   67,  522,   67,  522,  522,   67,  522,  522,  184,
      522,  522,   67,   67,  185,  522,  522,  522,  522,  522,
      522,  522,  522,   67,  120,  522,  120,  522,  522,  120,

      522,  522,  261,  522,  522,  120,  120,  262,  522,  522,
      522,  522,  522,  522,  522,  522,  120,   42,  522,   42,
      522,  265,  186,  522,  522,  522,  522,  522,  186,  186,
      266,  522,  522,  522,  522,  522,  522,  522,  522,  186,
      129,   73,  129,  522,  522,  129,  522,  522,  522,  522,
      522,  129,  129,  269,  522,  522,  522,  522,  522,  522,
      522,  522,  129,  270,  190,  522,  522,  522,  522,  522,
      190,  190,  272,  522,  522,  522,  522,  522,  522,  522,
      522,  190,   33,  522,   33,  522,  274,  275,  276,  522,
      522,  522,  522,  275,  275,  277,  522,  522,  522,  522,

      522,  522,  522,  522,  275,   73,   73,   73,  522,  126,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  127,   33,
      522,   33,  522,  280,  522,  281,  133,  134,   73,  134,
      133,  135,  136,  137,  133,  133,  133,  133,  136,  136,
      138,  133,  133,  133,  133,  133,  133,  133,  133,  136,
      194,  133,  134,   73,  134,  522,  522,  134,  282,  522,
      522,  522,  522,  134,  134,  283,  522,  522,  522,  522,
      522,  522,  522,  522,  134,  284,  200,  201,   73,  201,
      200,  202,  133,  203,  200,  200,  200,  200,  133,  133,

      204,  200,  200,  200,  200,  200,  200,  200,  200,  133,
      205,  200,   33,  522,   33,  522,  274,  275,  276,  522,
      522,  522,  522,  275,  275,  277,  522,  522,  522,  522,
      522,  522,  522,  522,  275,   33,  522,   33,  522,  522,
       33,  140,  522,  522,  522,  522,   33,   33,  141,  522,
      522,  522,  522,  522,  522,  522,  522,   33,   83,  522,
       83,  522,  522,   83,  207,  522,  522,  522,  522,   83,
       83,  208,  522,  522,  522,  522,  522,  522,  522,  522,
       83,   46,  522,   46,  522,  286,  287,  522,  522,  522,
      522,  522,  287,  287,  288,  289,  522,  522,  522,  522,

      522,  522,  522,  287,  145,   73,  145,  522,  212,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  213,  522,
      522,  522,  522,  522,  522,  522,  522,  214,  145,   73,
      145,  522,  212,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  213,  522,  522,  522,  522,  522,  522,  522,
      522,  214,   46,  522,   46,  522,  292,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  293,  144,  145,   73,
      145,  144,  146,  147,  144,  144,  144,  144,  144,  147,
      147,  148,  149,  144,  144,  144,  144,  144,  144,  144,
      147,  209,  144,  145,   73,  145,  522,  522,  145,  522,

      522,  522,  522,  522,  145,  145,  294,  295,  522,  522,
      522,  522,  522,  522,  522,  145,  296,  215,  216,   73,
      216,  215,  217,  144,  215,  215,  215,  215,  215,  144,
      144,  218,  219,  215,  215,  215,  215,  215,  215,  215,
      144,  220,  215,   46,  522,   46,  522,  286,  287,  522,
      522,  522,  522,  522,  287,  287,  288,  289,  522,  522,
      522,  522,  522,  522,  522,  287,   46,  522,   46,  522,
      522,   46,  522,  522,  522,  522,  522,   46,   46,  151,
      152,  522,  522,  522,  522,  522,  522,  522,   46,   94,
      522,   94,  522,  522,   94,  522,  522,  522,  522,  522,

       94,   94,  222,  223,  522,  522,  522,  522,  522,  522,
      522,   94,   46,  522,   46,  522,  522,   46,  522,  522,
      522,  522,  522,   46,   46,  151,  152,  522,  522,  522,
      522,  522,  522,  522,   46,   20,   21,  522,  522,  522,
      522,  522,   21,   21,   22,  522,  522,  297,  522,  522,
      522,  522,  522,   21,  299,  300,  522,  522,  522,  301,
      522,  300,  300,  302,  522,  522,  522,  522,  522,  522,
      522,  522,  300,   73,   73,   73,  522,  226,  522,  522,
      522,  522,  227,  522,  522,  522,  227,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  228,   73,   73,   73,

      522,  303,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      304,  157,   73,   73,   73,  157,  229,  227,  157,  157,
      157,  157,  157,  227,  227,  158,  157,  157,  157,  157,
      157,  157,  157,  157,  227,  230,  157,  307,  306,  522,
      522,  522,  522,  522,  306,  306,  302,  522,  522,  522,
      522,  522,  522,  522,  522,  306,  129,   73,  129,  522,
      232,  157,  522,  522,  522,  522,  522,  157,  157,  233,
      522,  522,  522,  522,  522,  522,  522,  522,  157,  234,
      307,  306,  522,  522,  522,  522,  522,  306,  306,  302,

      522,  522,  522,  522,  522,  522,  522,  522,  306,   73,
       73,   73,  522,  303,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  101,   24,  522,   24,  237,  238,  239,  522,
      522,  522,  522,  522,  239,  239,  240,  522,  522,  522,
      522,  522,  522,  522,  522,  239,   24,  522,   24,  237,
      238,  239,  522,  522,  522,  522,  522,  239,  239,  240,
      522,  522,  522,  522,  522,  522,  522,  308,  239,   24,
      522,   24,  243,  244,   62,  522,   62,  310,  311,  236,
      522,  522,  522,  522,  522,  236,  236,  312,  522,  522,

      522,  522,  522,  522,  522,  522,  236,   24,  522,   24,
      243,  244,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  313,   73,
       73,   73,  522,  522,   73,  522,  522,  522,  522,  522,
       73,   73,  192,  522,  522,  522,  522,  522,  522,  522,
      522,   73,  193,  169,   73,  169,  315,  522,  169,  522,
      522,  522,  522,  522,  169,  169,  316,  522,  522,  522,
      522,  522,  522,  522,  522,  169,  317,   24,  522,   24,
      319,  522,  241,  522,  522,  522,  522,  522,  241,  241,
      320,  522,  522,  522,  522,  522,  522,  522,  522,  241,

       67,  522,   67,  522,  322,  323,  522,  522,  324,  522,
      522,  323,  323,  325,  522,  522,  522,  522,  522,  522,
      522,  522,  323,  178,   73,  178,  522,  251,  522,  522,
      522,  252,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  253,  178,   73,  178,
      522,  251,  522,  522,  522,  252,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      253,   67,  522,   67,  522,  328,  522,  522,  522,  329,
      177,  178,   73,  178,  177,  179,  180,  177,  177,  181,
      177,  177,  180,  180,  182,  177,  177,  177,  177,  177,

      177,  177,  177,  180,  248,  177,  178,   73,  178,  522,
      522,  178,  522,  522,  330,  522,  522,  178,  178,  331,
      522,  522,  522,  522,  522,  522,  522,  522,  178,  332,
      254,  255,   73,  255,  254,  256,  177,  254,  254,  257,
      254,  254,  177,  177,  258,  254,  254,  254,  254,  254,
      254,  254,  254,  177,  259,  254,   67,  522,   67,  522,
      322,  323,  522,  522,  324,  522,  522,  323,  323,  325,
      522,  522,  522,  522,  522,  522,  522,  522,  323,   67,
      522,   67,  522,  522,   67,  522,  522,  184,  522,  522,
       67,   67,  185,  522,  522,  522,  522,  522,  522,  522,

      522,   67,   67,  522,   67,  522,  522,   67,  522,  522,
      184,  522,  522,   67,   67,  185,  522,  522,  522,  522,
      522,  522,  522,  522,   67,  120,  522,  120,  522,  522,
      120,  522,  522,  261,  522,  522,  120,  120,  262,  522,
      522,  522,  522,  522,  522,  522,  522,  120,   73,   73,
       73,  522,  334,  335,  522,  522,  522,  522,  522,  335,
      335,  336,  522,  522,  522,  522,  522,  522,  522,  522,
      335,  186,   42,  522,   42,  522,  265,  186,  522,  522,
      522,  522,  522,  186,  186,  266,  522,  522,  522,  522,
      522,  522,  522,  522,  186,   73,   73,   73,  522,  337,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  188,   73,
       73,   73,  522,  522,   73,  522,  522,  522,  522,  522,
       73,   73,  192,  522,  522,  522,  522,  522,  522,  522,
      522,   73,  193,  129,   73,  129,  522,  522,  129,  522,
      522,  522,  522,  522,  129,  129,  269,  522,  522,  522,
      522,  522,  522,  522,  522,  129,  270,  190,  522,  522,
      522,  522,  522,  190,  190,  272,  522,  522,  522,  522,
      522,  522,  522,  522,  190,  190,  522,  522,  522,  522,
      522,  190,  190,  272,  522,  522,  522,  522,  522,  522,

      522,  522,  190,   42,  522,   42,  522,  522,  271,  522,
      522,  522,  522,  522,  271,  271,  339,  522,  522,  522,
      522,  522,  522,  522,  522,  271,   33,  522,   33,  522,
      274,  275,  276,  522,  522,  522,  522,  275,  275,  277,
      522,  522,  522,  522,  522,  522,  522,  522,  275,   33,
      522,   33,  522,  274,  275,  276,  522,  522,  522,  522,
      275,  275,  277,  522,  522,  522,  522,  522,  522,  522,
      340,  275,   33,  522,   33,  522,  280,  522,  281,   83,
      522,   83,  522,  342,  273,  343,  522,  522,  522,  522,
      273,  273,  344,  522,  522,  522,  522,  522,  522,  522,

      522,  273,   33,  522,   33,  522,  280,  522,  281,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  345,  201,   73,  201,  522,  522,  201,
      347,  522,  522,  522,  522,  201,  201,  348,  522,  522,
      522,  522,  522,  522,  522,  522,  201,  349,   33,  522,
       33,  522,  522,  278,  351,  522,  522,  522,  522,  278,
      278,  352,  522,  522,  522,  522,  522,  522,  522,  522,
      278,   46,  522,   46,  522,  286,  287,  522,  522,  522,
      522,  522,  287,  287,  288,  289,  522,  522,  522,  522,
      522,  522,  522,  287,   46,  522,   46,  522,  286,  287,

      522,  522,  522,  522,  522,  287,  287,  288,  289,  522,
      522,  522,  522,  522,  522,  353,  287,   46,  522,   46,
      522,  292,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  293,   94,  522,   94,  522,  355,  285,  522,  522,
      522,  522,  522,  285,  285,  356,  357,  522,  522,  522,
      522,  522,  522,  522,  285,   46,  522,   46,  522,  292,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  293,
      522,  522,  522,  522,  522,  522,  358,  216,   73,  216,
      522,  522,  216,  522,  522,  522,  522,  522,  216,  216,
      360,  361,  522,  522,  522,  522,  522,  522,  522,  216,

      362,  145,   73,  145,  522,  522,  145,  522,  522,  522,
      522,  522,  145,  145,  294,  295,  522,  522,  522,  522,
      522,  522,  522,  145,  296,   46,  522,   46,  522,  522,
      290,  522,  522,  522,  522,  522,  290,  290,  364,  365,
      522,  522,  522,  522,  522,  522,  522,  290,  367,  522,
      368,  369,  522,  522,  522,  522,  522,  369,  369,  370,
      522,  522,  522,  522,  522,  522,  522,  522,  369,  299,
      300,  522,  522,  522,  301,  522,  300,  300,  302,  522,
      522,  522,  522,  522,  522,  522,  522,  300,  299,  300,
      522,  522,  522,  301,  522,  300,  300,  302,  522,  522,

      522,  522,  522,  522,  522,  371,  300,  307,  306,  522,
      522,  522,  522,  522,  306,  306,  302,  522,  522,  522,
      522,  522,  522,  522,  522,  306,   42,  522,   42,  522,
      373,  301,  522,  522,  522,  522,  522,  301,  301,  374,
      522,  522,  522,  522,  522,  522,  522,  522,  301,   73,
       73,   73,  522,  303,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  304,  305,  522,  522,  522,  522,  306,  522,
      522,  522,  306,  522,  522,  522,  522,  522,  522,  522,
      376,  307,  306,  522,  522,  522,  522,  522,  306,  306,

      302,  522,  522,  522,  522,  522,  522,  522,  377,  306,
      378,  107,   73,  107,  379,  380,  381,  378,  378,  378,
      378,  378,  381,  381,  382,  378,  378,  378,  378,  378,
      378,  378,  378,  381,  236,  378,   24,  522,   24,  237,
      238,  239,  522,  522,  522,  522,  522,  239,  239,  240,
      522,  522,  522,  522,  522,  522,  522,  522,  239,   24,
      522,   24,  237,  238,  239,  522,  522,  522,  522,  522,
      239,  239,  240,  522,  522,  522,  522,  522,  522,  522,
      308,  239,   62,  522,   62,  310,  311,  236,  522,  522,
      522,  522,  522,  236,  236,  312,  522,  522,  522,  522,

      522,  522,  522,  522,  236,  107,   73,  107,  383,  384,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  239,  107,
       73,  107,  245,  522,  107,  522,  522,  522,  522,  522,
      107,  107,  246,  522,  522,  522,  522,  522,  522,  522,
      522,  107,  247,  169,   73,  169,  315,  522,  169,  522,
      522,  522,  522,  522,  169,  169,  316,  522,  522,  522,
      522,  522,  522,  522,  522,  169,  317,   24,  522,   24,
      319,  522,  241,  522,  522,  522,  522,  522,  241,  241,
      320,  522,  522,  522,  522,  522,  522,  522,  522,  241,

       24,  522,   24,  319,  522,  241,  522,  522,  522,  522,
      522,  241,  241,  320,  522,  522,  522,  522,  522,  522,
      522,  522,  241,   62,  522,   62,  386,  522,  318,  522,
      522,  522,  522,  522,  318,  318,  387,  522,  522,  522,
      522,  522,  522,  522,  522,  318,   67,  522,   67,  522,
      322,  323,  522,  522,  324,  522,  522,  323,  323,  325,
      522,  522,  522,  522,  522,  522,  522,  522,  323,   67,
      522,   67,  522,  322,  323,  522,  522,  324,  522,  522,
      323,  323,  325,  522,  522,  522,  522,  522,  522,  522,
      388,  323,   67,  522,   67,  522,  328,  522,  522,  522,

      329,  120,  522,  120,  522,  390,  321,  522,  522,  391,
      522,  522,  321,  321,  392,  522,  522,  522,  522,  522,
      522,  522,  522,  321,   67,  522,   67,  522,  328,  522,
      522,  522,  329,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  393,  178,   73,  178,  522,
      522,  178,  522,  522,  330,  522,  522,  178,  178,  331,
      522,  522,  522,  522,  522,  522,  522,  522,  178,  332,
      255,   73,  255,  522,  522,  255,  522,  522,  395,  522,
      522,  255,  255,  396,  522,  522,  522,  522,  522,  522,
      522,  522,  255,  397,   67,  522,   67,  522,  522,  326,

      522,  522,  399,  522,  522,  326,  326,  400,  522,  522,
      522,  522,  522,  522,  522,  522,  326,   73,   73,   73,
      522,  334,  335,  522,  522,  522,  522,  522,  335,  335,
      336,  522,  522,  522,  522,  522,  522,  522,  522,  335,
      401,   73,   73,   73,  522,  334,  335,  522,  522,  522,
      522,  522,  335,  335,  336,  522,  522,  522,  522,  522,
      522,  522,  522,  335,  401,   73,   73,   73,  522,  337,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  402,  129,
       73,  129,  522,  404,  333,  522,  522,  522,  522,  522,

      333,  333,  405,  522,  522,  522,  522,  522,  522,  522,
      522,  333,  406,   73,   73,   73,  522,  337,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  402,   42,  522,   42,
      522,  522,  271,  522,  522,  522,  522,  522,  271,  271,
      339,  522,  522,  522,  522,  522,  522,  522,  522,  271,
      407,  134,   73,  134,  407,  408,  409,  410,  407,  407,
      407,  407,  409,  409,  411,  407,  407,  407,  407,  407,
      407,  407,  407,  409,  273,  407,   33,  522,   33,  522,
      274,  275,  276,  522,  522,  522,  522,  275,  275,  277,

      522,  522,  522,  522,  522,  522,  522,  522,  275,   33,
      522,   33,  522,  274,  275,  276,  522,  522,  522,  522,
      275,  275,  277,  522,  522,  522,  522,  522,  522,  522,
      340,  275,   83,  522,   83,  522,  342,  273,  343,  522,
      522,  522,  522,  273,  273,  344,  522,  522,  522,  522,
      522,  522,  522,  522,  273,  134,   73,  134,  522,  412,
      522,  413,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  275,  134,
       73,  134,  522,  522,  134,  282,  522,  522,  522,  522,
      134,  134,  283,  522,  522,  522,  522,  522,  522,  522,

      522,  134,  284,  201,   73,  201,  522,  522,  201,  347,
      522,  522,  522,  522,  201,  201,  348,  522,  522,  522,
      522,  522,  522,  522,  522,  201,  349,   33,  522,   33,
      522,  522,  278,  351,  522,  522,  522,  522,  278,  278,
      352,  522,  522,  522,  522,  522,  522,  522,  522,  278,
       33,  522,   33,  522,  522,  278,  351,  522,  522,  522,
      522,  278,  278,  352,  522,  522,  522,  522,  522,  522,
      522,  522,  278,   83,  522,   83,  522,  522,  350,  415,
      522,  522,  522,  522,  350,  350,  416,  522,  522,  522,
      522,  522,  522,  522,  522,  350,  417,  145,   73,  145,

      417,  418,  419,  417,  417,  417,  417,  417,  419,  419,
      420,  421,  417,  417,  417,  417,  417,  417,  417,  419,
      285,  417,   46,  522,   46,  522,  286,  287,  522,  522,
      522,  522,  522,  287,  287,  288,  289,  522,  522,  522,
      522,  522,  522,  522,  287,   46,  522,   46,  522,  286,
      287,  522,  522,  522,  522,  522,  287,  287,  288,  289,
      522,  522,  522,  522,  522,  522,  353,  287,   94,  522,
       94,  522,  355,  285,  522,  522,  522,  522,  522,  285,
      285,  356,  357,  522,  522,  522,  522,  522,  522,  522,
      285,  145,   73,  145,  522,  422,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  423,  522,  522,  522,  522,
      522,  522,  522,  522,  287,  145,   73,  145,  522,  522,
      145,  522,  522,  522,  522,  522,  145,  145,  294,  295,
      522,  522,  522,  522,  522,  522,  522,  145,  296,  216,
       73,  216,  522,  522,  216,  522,  522,  522,  522,  522,
      216,  216,  360,  361,  522,  522,  522,  522,  522,  522,
      522,  216,  362,  145,   73,  145,  522,  522,  145,  522,
      522,  522,  522,  522,  145,  145,  294,  295,  522,  522,
      522,  522,  522,  522,  522,  145,  296,   46,  522,   46,
      522,  522,  290,  522,  522,  522,  522,  522,  290,  290,

      364,  365,  522,  522,  522,  522,  522,  522,  522,  290,
       46,  522,   46,  522,  522,  290,  522,  522,  522,  522,
      522,  290,  290,  364,  365,  522,  522,  522,  522,  522,
      522,  522,  290,   94,  522,   94,  522,  522,  363,  522,
      522,  522,  522,  522,  363,  363,  425,  426,  522,  522,
      522,  522,  522,  522,  522,  363,  368,  369,  522,  522,
      522,  522,  522,  369,  369,  370,  522,  522,  522,  522,
      522,  522,  522,  522,  369,  368,  369,  522,  522,  522,
      522,  522,  369,  369,  370,  522,  522,  522,  522,  522,
      522,  522,  428,  369,   42,  522,   42,  522,  431,  366,

      522,  522,  522,  522,  522,  366,  366,  432,  522,  522,
      522,  522,  522,  522,  522,  522,  366,  433,   73,   73,
       73,  433,  434,  435,  433,  433,  433,  436,  433,  435,
      435,  437,  433,  433,  433,  433,  433,  433,  433,  433,
      435,  298,  433,  307,  306,  522,  522,  522,  522,  522,
      306,  306,  302,  522,  522,  522,  522,  522,  522,  522,
      522,  306,  307,  306,  522,  522,  522,  522,  522,  306,
      306,  302,  522,  522,  522,  522,  522,  522,  522,  377,
      306,   42,  522,   42,  522,  373,  301,  522,  522,  522,
      522,  522,  301,  301,  374,  522,  522,  522,  522,  522,

      522,  522,  522,  301,   73,   73,   73,  522,  439,  522,
      522,  522,  522,  440,  522,  522,  522,  440,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  300,   73,   73,
       73,  522,  441,  440,  522,  522,  522,  522,  522,  440,
      440,  437,  522,  522,  522,  522,  522,  522,  522,  522,
      440,  301,  378,  107,   73,  107,  379,  380,  381,  378,
      378,  378,  378,  378,  381,  381,  382,  378,  378,  378,
      378,  378,  378,  378,  378,  381,  442,  378,  107,   73,
      107,  383,  384,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  443,  444,  169,   73,  169,  445,  446,  378,  444,
      444,  444,  444,  444,  378,  378,  447,  444,  444,  444,
      444,  444,  444,  444,  444,  378,  448,  444,   73,   73,
       73,  522,  337,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  402,  107,   73,  107,  383,  384,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  443,   24,  522,   24,  319,
      522,  241,  522,  522,  522,  522,  522,  241,  241,  320,
      522,  522,  522,  522,  522,  522,  522,  522,  241,   62,

      522,   62,  386,  522,  318,  522,  522,  522,  522,  522,
      318,  318,  387,  522,  522,  522,  522,  522,  522,  522,
      522,  318,  449,  178,   73,  178,  449,  450,  451,  449,
      449,  452,  449,  449,  451,  451,  453,  449,  449,  449,
      449,  449,  449,  449,  449,  451,  321,  449,   67,  522,
       67,  522,  322,  323,  522,  522,  324,  522,  522,  323,
      323,  325,  522,  522,  522,  522,  522,  522,  522,  522,
      323,   67,  522,   67,  522,  322,  323,  522,  522,  324,
      522,  522,  323,  323,  325,  522,  522,  522,  522,  522,
      522,  522,  388,  323,  120,  522,  120,  522,  390,  321,

      522,  522,  391,  522,  522,  321,  321,  392,  522,  522,
      522,  522,  522,  522,  522,  522,  321,  178,   73,  178,
      522,  454,  522,  522,  522,  455,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      323,  178,   73,  178,  522,  522,  178,  522,  522,  330,
      522,  522,  178,  178,  331,  522,  522,  522,  522,  522,
      522,  522,  522,  178,  332,  178,   73,  178,  522,  522,
      178,  522,  522,  330,  522,  522,  178,  178,  331,  522,
      522,  522,  522,  522,  522,  522,  522,  178,  332,  255,
       73,  255,  522,  522,  255,  522,  522,  395,  522,  522,

      255,  255,  396,  522,  522,  522,  522,  522,  522,  522,
      522,  255,  397,   67,  522,   67,  522,  522,  326,  522,
      522,  399,  522,  522,  326,  326,  400,  522,  522,  522,
      522,  522,  522,  522,  522,  326,   67,  522,   67,  522,
      522,  326,  522,  522,  399,  522,  522,  326,  326,  400,
      522,  522,  522,  522,  522,  522,  522,  522,  326,  120,
      522,  120,  522,  522,  398,  522,  522,  457,  522,  522,
      398,  398,  458,  522,  522,  522,  522,  522,  522,  522,
      522,  398,  187,  188,  522,  522,  522,  522,  522,  188,
      188,  189,  522,  522,  522,  522,  522,  522,  522,  522,

      188,  129,   73,  129,  522,  404,  333,  522,  522,  522,
      522,  522,  333,  333,  405,  522,  522,  522,  522,  522,
      522,  522,  522,  333,  406,  187,  188,  522,  522,  522,
      522,  522,  188,  188,  189,  522,  522,  522,  522,  522,
      522,  522,  522,  188,  407,  134,   73,  134,  407,  408,
      409,  410,  407,  407,  407,  407,  409,  409,  411,  407,
      407,  407,  407,  407,  407,  407,  407,  409,  459,  407,
      134,   73,  134,  522,  412,  522,  413,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  460,  461,  201,   73,  201,  461,  462,

      407,  463,  461,  461,  461,  461,  407,  407,  464,  461,
      461,  461,  461,  461,  461,  461,  461,  407,  465,  461,
      134,   73,  134,  522,  412,  522,  413,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  460,   73,   73,   73,  522,  337,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  402,   33,  522,
       33,  522,  522,  278,  351,  522,  522,  522,  522,  278,
      278,  352,  522,  522,  522,  522,  522,  522,  522,  522,
      278,   83,  522,   83,  522,  522,  350,  415,  522,  522,

      522,  522,  350,  350,  416,  522,  522,  522,  522,  522,
      522,  522,  522,  350,  417,  145,   73,  145,  417,  418,
      419,  417,  417,  417,  417,  417,  419,  419,  420,  421,
      417,  417,  417,  417,  417,  417,  417,  419,  466,  417,
      145,   73,  145,  522,  422,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  423,  522,  522,  522,  522,  522,
      522,  522,  522,  467,  468,  216,   73,  216,  468,  469,
      417,  468,  468,  468,  468,  468,  417,  417,  470,  471,
      468,  468,  468,  468,  468,  468,  468,  417,  472,  468,
      145,   73,  145,  522,  422,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  423,  522,  522,  522,  522,  522,
      522,  522,  522,  467,   94,  522,   94,  522,  522,  363,
      522,  522,  522,  522,  522,  363,  363,  425,  426,  522,
      522,  522,  522,  522,  522,  522,  363,   73,   73,   73,
      522,  474,  475,  522,  522,  522,  522,  522,  475,  475,
      476,  522,  522,  522,  522,  522,  522,  522,  522,  475,
      366,  368,  369,  522,  522,  522,  522,  522,  369,  369,
      370,  522,  522,  522,  522,  522,  522,  522,  522,  369,
       42,  522,   42,  522,  431,  366,  522,  522,  522,  522,
      522,  366,  366,  432,  522,  522,  522,  522,  522,  522,

      522,  522,  366,   73,   73,   73,  522,  439,  522,  522,
      522,  522,  440,  522,  522,  522,  440,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  479,   73,   73,   73,
      522,  441,  440,  522,  522,  522,  522,  522,  440,  440,
      437,  522,  522,  522,  522,  522,  522,  522,  522,  440,
      480,  129,   73,  129,  522,  482,  436,  522,  522,  522,
      522,  522,  436,  436,  483,  522,  522,  522,  522,  522,
      522,  522,  522,  436,  484,   73,   73,   73,  522,  485,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  306,   73,

       73,   73,  522,  485,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  486,   24,  522,   24,  237,  238,  239,  522,
      522,  522,  522,  522,  239,  239,  240,  522,  522,  522,
      522,  522,  522,  522,  522,  239,   24,  522,   24,  243,
      244,  378,  107,   73,  107,  379,  380,  381,  378,  378,
      378,  378,  378,  381,  381,  382,  378,  378,  378,  378,
      378,  378,  378,  378,  381,  442,  378,  444,  169,   73,
      169,  445,  446,  378,  444,  444,  444,  444,  444,  378,
      378,  447,  444,  444,  444,  444,  444,  444,  444,  444,

      378,  448,  444,   24,  522,   24,  237,  238,  239,  522,
      522,  522,  522,  522,  239,  239,  240,  522,  522,  522,
      522,  522,  522,  522,  522,  239,  178,   73,  178,  522,
      454,  522,  522,  522,  455,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  488,
      489,  255,   73,  255,  489,  490,  449,  489,  489,  491,
      489,  489,  449,  449,  492,  489,  489,  489,  489,  489,
      489,  489,  489,  449,  493,  489,  120,  522,  120,  522,
      522,  398,  522,  522,  457,  522,  522,  398,  398,  458,
      522,  522,  522,  522,  522,  522,  522,  522,  398,   33,

      522,   33,  522,  274,  275,  276,  522,  522,  522,  522,
      275,  275,  277,  522,  522,  522,  522,  522,  522,  522,
      522,  275,   33,  522,   33,  522,  280,  522,  281,   33,
      522,   33,  522,  274,  275,  276,  522,  522,  522,  522,
      275,  275,  277,  522,  522,  522,  522,  522,  522,  522,
      522,  275,   46,  522,   46,  522,  286,  287,  522,  522,
      522,  522,  522,  287,  287,  288,  289,  522,  522,  522,
      522,  522,  522,  522,  287,   46,  522,   46,  522,  292,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  293,
       46,  522,   46,  522,  286,  287,  522,  522,  522,  522,

      522,  287,  287,  288,  289,  522,  522,  522,  522,  522,
      522,  522,  287,   73,   73,   73,  522,  474,  475,  522,
      522,  522,  522,  522,  475,  475,  476,  522,  522,  522,
      522,  522,  522,  522,  522,  475,  494,   73,   73,   73,
      522,  495,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      496,  129,   73,  129,  522,  498,  473,  522,  522,  522,
      522,  522,  473,  473,  499,  522,  522,  522,  522,  522,
      522,  522,  522,  473,  500,   73,   73,   73,  522,  495,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  369,  299,
      300,  522,  522,  522,  301,  522,  300,  300,  302,  522,
      522,  522,  522,  522,  522,  522,  522,  300,  307,  306,
      522,  522,  522,  522,  522,  306,  306,  302,  522,  522,
      522,  522,  522,  522,  522,  522,  306,  129,   73,  129,
      522,  482,  436,  522,  522,  522,  522,  522,  436,  436,
      483,  522,  522,  522,  522,  522,  522,  522,  522,  436,
      484,  307,  306,  522,  522,  522,  522,  522,  306,  306,
      302,  522,  522,  522,  522,  522,  522,  522,  522,  306,
       73,   73,   73,  522,  485,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  486,   67,  522,   67,  522,  322,  323,
      522,  522,  324,  522,  522,  323,  323,  325,  522,  522,
      522,  522,  522,  522,  522,  522,  323,   67,  522,   67,
      522,  328,  522,  522,  522,  329,   67,  522,   67,  522,
      322,  323,  522,  522,  324,  522,  522,  323,  323,  325,
      522,  522,  522,  522,  522,  522,  522,  522,  323,  502,
      503,  522,  522,  522,  522,  522,  503,  503,  504,  522,
      522,  522,  522,  522,  522,  522,  522,  503,   73,   73,
       73,  522,  495,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  496,  129,   73,  129,  522,  498,  473,  522,  522,
      522,  522,  522,  473,  473,  499,  522,  522,  522,  522,
      522,  522,  522,  522,  473,  500,  502,  503,  522,  522,
      522,  522,  522,  503,  503,  504,  522,  522,  522,  522,
      522,  522,  522,  522,  503,   42,  522,   42,  522,  508,
      501,  522,  522,  522,  522,  522,  501,  501,  509,  522,
      522,  522,  522,  522,  522,  522,  522,  501,   73,   73,
       73,  522,  512,  513,  522,  522,  522,  522,  522,  513,
      513,  514,  522,  522,  522,  522,  522,  522,  522,  522,

      513,  501,   42,  522,   42,  522,  508,  501,  522,  522,
      522,  522,  522,  501,  501,  509,  522,  522,  522,  522,
      522,  522,  522,  522,  501,   73,   73,   73,  522,  515,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  503,   73,
       73,   73,  522,  512,  513,  522,  522,  522,  522,  522,
      513,  513,  514,  522,  522,  522,  522,  522,  522,  522,
      522,  513,  516,   73,   73,   73,  522,  515,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  517,  129,   73,  129,

      522,  519,  511,  522,  522,  522,  522,  522,  511,  511,
      520,  522,  522,  522,  522,  522,  522,  522,  522,  511,
      521,   73,   73,   73,  522,  515,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  517,  129,   73,  129,  522,  519,
      511,  522,  522,  522,  522,  522,  511,  511,  520,  522,
      522,  522,  522,  522,  522,  522,  522,  511,  521,   19,
      522,  522,  522,   19,   23,   23,  522,   23,   23,   21,
      522,  522,  522,   21,   32,   32,  522,   32,   32,   41,
       41,  522,   41,   41,   45,   45,  522,   45,   45,   52,

      522,  522,  522,   52,   24,   24,  522,   24,   24,   27,
       27,  522,   27,   27,   61,   61,  522,   61,   61,   66,
       66,  522,   66,   66,   72,   72,   72,   72,   72,   33,
       33,  522,   33,   33,   35,   35,  522,   35,   35,   82,
       82,  522,   82,   82,   46,   46,  522,   46,   46,   48,
       48,  522,   48,   48,   93,   93,  522,   93,   93,   54,
      522,  522,  522,   54,   55,  522,  522,  522,   55,  103,
      103,  522,  103,  103,   62,   62,  522,   62,   62,   67,
       67,  522,   67,   67,   69,   69,  522,   69,   69,  119,
      119,  522,  119,  119,   73,   73,   73,   73,   73,   75,

       75,   75,   75,   75,  128,  128,  128,  128,  128,   83,
       83,  522,   83,   83,  142,  142,  522,  142,  142,   94,
       94,  522,   94,   94,  101,  522,  522,  522,  101,  107,
      107,  107,  107,  107,  110,  110,  110,  110,  110,  174,
      174,  522,  174,  174,  120,  120,  522,  120,  120,  186,
      522,  522,  522,  186,  190,  522,  522,  522,  190,  188,
      522,  522,  522,  188,  129,  129,  129,  129,  129,  134,
      134,  134,  134,  134,  136,  136,  136,  136,  136,  206,
      206,  522,  206,  206,  145,  145,  145,  145,  145,  147,
      147,  147,  147,  147,  221,  221,  522,  221,  221,   94,

       94,  522,   94,   94,  156,  156,  156,  156,  156,  157,
      157,  157,  157,  157,  231,  231,  231,  231,  231,  101,
      522,  522,  522,  101,  236,  236,  522,  236,  236,   73,
       73,   73,   73,   73,  241,  241,  522,  241,  241,  239,
      239,  522,  239,  239,  169,  169,  169,  169,  169,   62,
       62,  522,   62,   62,  174,  174,  522,  174,  174,  178,
      178,  178,  178,  178,  180,  180,  180,  180,  180,  120,
      120,  522,  120,  120,  260,  260,  522,  260,  260,  188,
      522,  522,  522,  188,  264,  264,  522,  264,  264,  190,
      522,  522,  522,  190,  268,  268,  268,  268,  268,  271,

      522,  522,  522,  271,  273,  273,  522,  273,  273,  278,
      278,  522,  278,  278,  275,  275,  522,  275,  275,  201,
      201,  201,  201,  201,   83,   83,  522,   83,   83,  206,
      206,  522,  206,  206,  285,  285,  522,  285,  285,  145,
      145,  145,  145,  145,  290,  290,  522,  290,  290,  147,
      147,  147,  147,  147,  287,  287,  522,  287,  287,  216,
      216,  216,  216,  216,   94,   94,  522,   94,   94,  221,
      221,  522,  221,  221,   19,  522,  522,  522,   19,  298,
      522,  522,  522,  298,  156,  156,  156,  156,  156,  227,
      227,  227,  227,  227,  300,  522,  522,  522,  300,  301,

      522,  522,  522,  301,  231,  231,  231,  231,  231,  236,
      236,  522,  236,  236,  239,  239,  522,  239,  239,  309,
      309,  522,  309,  309,  241,  241,  522,  241,  241,  129,
      129,  129,  129,  129,  314,  314,  314,  314,  314,  318,
      318,  522,  318,  318,  321,  321,  522,  321,  321,  178,
      178,  178,  178,  178,  326,  326,  522,  326,  326,  180,
      180,  180,  180,  180,  323,  323,  522,  323,  323,  255,
      255,  255,  255,  255,  120,  120,  522,  120,  120,  260,
      260,  522,  260,  260,  333,  333,  333,  333,  333,  264,
      264,  522,  264,  264,  335,  335,  335,  335,  335,  268,

      268,  268,  268,  268,  271,  522,  522,  522,  271,  338,
      338,  522,  338,  338,  273,  273,  522,  273,  273,  275,
      275,  522,  275,  275,  341,  341,  522,  341,  341,  278,
      278,  522,  278,  278,  346,  346,  346,  346,  346,  350,
      350,  522,  350,  350,  285,  285,  522,  285,  285,  287,
      287,  522,  287,  287,  354,  354,  522,  354,  354,  290,
      290,  522,  290,  290,  359,  359,  359,  359,  359,  216,
      216,  216,  216,  216,  363,  363,  522,  363,  363,  366,
      522,  522,  366,  366,  298,  522,  522,  522,  298,  300,
      522,  522,  522,  300,  301,  522,  522,  522,  301,  372,

      372,  522,  372,  372,  227,  227,  227,  227,  227,  306,
      522,  522,  522,  306,  236,  236,  522,  236,  236,  309,
      309,  522,  309,  309,  381,  381,  381,  381,  381,  169,
      169,  169,  169,  169,  314,  314,  314,  314,  314,  318,
      318,  522,  318,  318,  385,  385,  522,  385,  385,  321,
      321,  522,  321,  321,  323,  323,  522,  323,  323,  389,
      389,  522,  389,  389,  326,  326,  522,  326,  326,  255,
      255,  255,  255,  255,  394,  394,  394,  394,  394,  398,
      398,  522,  398,  398,  333,  333,  333,  333,  333,  335,
      335,  335,  335,  335,  403,  403,  403,  403,  403,  338,

      338,  522,  338,  338,  273,  273,  522,  273,  273,  341,
      341,  522,  341,  341,  409,  409,  409,  409,  409,  201,
      201,  201,  201,  201,  346,  346,  346,  346,  346,  350,
      350,  522,  350,  350,  414,  414,  522,  414,  414,  285,
      285,  522,  285,  285,  354,  354,  522,  354,  354,  419,
      419,  419,  419,  419,  216,  216,  216,  216,  216,  359,
      359,  359,  359,  359,  363,  363,  522,  363,  363,  424,
      424,  522,  424,  424,  366,  522,  522,  522,  366,  427,
      522,  522,  427,  427,  369,  522,  522,  522,  369,  430,
      430,  522,  430,  430,  301,  522,  522,  522,  301,  372,

      372,  522,  372,  372,  306,  522,  522,  522,  306,  435,
      435,  435,  435,  435,  436,  436,  436,  436,  436,  381,
      381,  381,  381,  381,  318,  318,  522,  318,  318,  385,
      385,  522,  385,  385,  321,  321,  522,  321,  321,  389,
      389,  522,  389,  389,  451,  451,  451,  451,  451,  255,
      255,  255,  255,  255,  394,  394,  394,  394,  394,  398,
      398,  522,  398,  398,  456,  456,  522,  456,  456,  186,
      522,  522,  522,  186,  188,  522,  522,  522,  188,  403,
      403,  403,  403,  403,  409,  409,  409,  409,  409,  350,
      350,  522,  350,  350,  414,  414,  522,  414,  414,  419,

      419,  419,  419,  419,  473,  473,  473,  473,  473,  481,
      481,  481,  481,  481,  440,  440,  440,  440,  440,  236,
      236,  522,  236,  236,  239,  239,  522,  239,  239,  273,
      273,  522,  273,  273,  275,  275,  522,  275,  275,  285,
      285,  522,  285,  285,  287,  287,  522,  287,  287,  475,
      475,  475,  475,  475,  497,  497,  497,  497,  497,  298,
      522,  522,  522,  298,  300,  522,  522,  522,  300,  301,
      522,  522,  522,  301,  306,  522,  522,  522,  306,  321,
      321,  522,  321,  321,  323,  323,  522,  323,  323,  501,
      522,  522,  522,  501,  503,  522,  522,  522,  503,  507,

      507,  522,  507,  507,  511,  511,  511,  511,  511,  513,
      513,  513,  513,  513,  518,  518,  518,  518,  518,    3,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522
    } ;

static const flex_int16_t yy_chk[7947] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    4,   13,   13,
       40,   40,   11,    4,    4,    4,   13,   11,   19,   25,
       36,   16,   31,  558,    4,    7,   11,    7,    7,    7,
        7,   16,   19,   25,   36,   16,    7,    7,    7,   31,
       41,   54,  107,  538,  107,   51,   54,    7,    8,    8,
       54,    8,  517,  508,   41,    8,    8,    8,   51,   51,
       63,   85,  503,  134,  107,    8,    8,   10,  134,   10,
       98,   10,   10,   10,   63,   85,  160,  502,   10,   10,

       10,   98,  191,  145,   98,  134,  496,  491,  490,   10,
       14,  489,   14,  160,   14,   14,  145,  210,  486,  191,
      153,   14,   14,   14,  164,  145,  164,  164,  153,  178,
      210,  452,   14,   15,  153,   15,  178,   15,   15,  210,
      241,  450,  241,  241,   15,   15,   15,   15,  196,  449,
      196,  178,  375,  434,  196,   15,   18,   18,  211,  249,
      211,   18,  228,   18,   18,   18,  249,  228,  250,  375,
      250,  228,  211,  433,   18,   22,  250,   22,  429,   22,
       22,  249,  290,  278,  290,  278,   22,   22,   22,  278,
      291,  326,  291,  326,  431,  429,  290,   22,   23,  326,

       23,   23,   23,   23,  291,  427,  327,  300,  327,   23,
       23,   23,  300,  479,  327,  505,  300,  402,  479,  391,
       23,   27,  479,   27,   27,   27,   28,  369,   28,   28,
       28,   28,  505,  367,  357,  329,  324,   28,   28,   28,
      306,  304,  293,  289,  281,  265,  243,  207,   28,   29,
      197,   29,  195,   29,   29,  188,  187,   29,  175,  166,
       29,   29,   29,  163,  155,  154,  149,  146,  144,  142,
      140,   29,   30,   30,   30,  135,   30,   30,  133,  127,
      121,  118,  115,   30,   30,   30,  113,  109,  106,  103,
      101,   95,   92,   89,   30,   30,   32,   87,   32,   84,

       32,   32,   32,   81,   73,   68,   67,   32,   32,   32,
       64,   59,   53,   47,   46,   43,   42,   39,   32,   35,
       38,   35,   34,   35,   33,   35,   37,   26,   37,   24,
       37,   37,   37,   21,   20,   17,   12,   37,   37,   37,
        9,    3,    0,    0,    0,    0,    0,    0,   37,   45,
        0,   45,    0,   45,   45,    0,    0,    0,    0,    0,
       45,   45,   45,   45,    0,    0,    0,    0,    0,    0,
        0,   45,   48,    0,   48,    0,   48,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   48,   49,    0,   49,
        0,   49,   49,    0,    0,    0,    0,    0,   49,   49,

       49,   49,    0,    0,    0,    0,    0,    0,    0,   49,
       52,   52,    0,    0,    0,   52,    0,   52,   52,   52,
        0,    0,    0,    0,    0,    0,    0,    0,   52,   55,
       55,    0,    0,    0,    0,    0,   55,   55,   55,    0,
        0,    0,    0,    0,    0,    0,    0,   55,   56,    0,
       56,    0,   56,   56,    0,    0,    0,    0,    0,   56,
       56,   56,    0,    0,    0,    0,    0,    0,    0,    0,
       56,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   60,    0,   60,

       60,   60,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   60,   62,
        0,   62,   62,    0,   62,    0,    0,    0,    0,    0,
       62,   62,   62,    0,    0,    0,    0,    0,    0,    0,
        0,   62,   65,    0,   65,   65,   65,   65,    0,    0,
        0,    0,    0,   65,   65,   65,    0,    0,    0,    0,
        0,    0,    0,    0,   65,   66,    0,   66,    0,   66,
       66,    0,    0,   66,    0,    0,   66,   66,   66,    0,
        0,    0,    0,    0,    0,    0,    0,   66,   69,    0,
       69,    0,   69,    0,    0,    0,   69,   71,    0,   71,

        0,   71,   71,    0,    0,   71,    0,    0,   71,   71,
       71,    0,    0,    0,    0,    0,    0,    0,    0,   71,
       72,   72,   72,    0,   72,   72,    0,    0,    0,    0,
        0,   72,   72,   72,    0,    0,    0,    0,    0,    0,
        0,    0,   72,   72,   75,   75,   75,    0,   75,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   75,   76,   76,
       76,    0,   76,   76,    0,    0,    0,    0,    0,   76,
       76,   76,    0,    0,    0,    0,    0,    0,    0,    0,
       76,   76,   77,   77,   77,    0,   77,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   77,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   80,    0,   80,    0,   80,    0,   80,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   80,   83,    0,   83,    0,    0,   83,
       83,    0,    0,    0,    0,   83,   83,   83,    0,    0,
        0,    0,    0,    0,    0,    0,   83,   86,    0,   86,
        0,   86,   86,   86,    0,    0,    0,    0,   86,   86,

       86,    0,    0,    0,    0,    0,    0,    0,    0,   86,
       88,    0,   88,    0,    0,   88,    0,    0,    0,    0,
        0,   88,   88,   88,    0,    0,    0,    0,    0,    0,
        0,    0,   88,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   91,
        0,   91,    0,   91,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   91,    0,    0,    0,    0,    0,    0,
       91,   94,    0,   94,    0,    0,   94,    0,    0,    0,
        0,    0,   94,   94,   94,   94,    0,    0,    0,    0,

        0,    0,    0,   94,   96,    0,   96,    0,   96,   96,
        0,    0,    0,    0,    0,   96,   96,   96,   96,    0,
        0,    0,    0,    0,    0,    0,   96,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  100,    0,    0,    0,    0,  100,    0,
        0,    0,  100,    0,    0,    0,    0,    0,    0,    0,
      100,  102,  102,    0,    0,    0,    0,    0,  102,  102,
      102,    0,    0,    0,    0,    0,    0,    0,  102,  102,
      105,    0,  105,    0,  105,  105,    0,    0,    0,    0,

        0,  105,  105,  105,    0,    0,    0,    0,    0,    0,
        0,    0,  105,  110,  110,  110,  110,  110,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  110,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  112,  112,  112,  112,  112,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  112,  114,    0,  114,
      114,    0,  114,    0,    0,    0,    0,    0,  114,  114,

      114,    0,    0,    0,    0,    0,    0,    0,    0,  114,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  117,    0,  117,    0,
      117,    0,    0,    0,  117,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  117,  120,    0,
      120,    0,    0,  120,    0,    0,  120,    0,    0,  120,
      120,  120,    0,    0,    0,    0,    0,    0,    0,    0,
      120,  123,    0,  123,    0,  123,  123,    0,    0,  123,
        0,    0,  123,  123,  123,    0,    0,    0,    0,    0,

        0,    0,    0,  123,  124,  124,    0,    0,    0,    0,
        0,  124,  124,  124,    0,    0,    0,    0,    0,    0,
        0,    0,  124,  126,  126,  126,    0,  126,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  126,  129,  129,  129,
        0,    0,  129,    0,    0,    0,    0,    0,  129,  129,
      129,    0,    0,    0,    0,    0,    0,    0,    0,  129,
      129,  131,  131,  131,    0,  131,  131,    0,    0,    0,
        0,    0,  131,  131,  131,    0,    0,    0,    0,    0,
        0,    0,    0,  131,  131,  132,  132,    0,    0,    0,

        0,    0,  132,  132,  132,    0,    0,    0,    0,    0,
        0,    0,    0,  132,  136,  136,  136,    0,  136,    0,
      136,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  136,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  139,  139,  139,    0,  139,    0,
      139,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  139,  141,    0,
      141,    0,    0,  141,  141,    0,    0,    0,    0,  141,

      141,  141,    0,    0,    0,    0,    0,    0,    0,    0,
      141,  143,    0,  143,    0,    0,  143,    0,    0,    0,
        0,    0,  143,  143,  143,    0,    0,    0,    0,    0,
        0,    0,    0,  143,  147,  147,  147,    0,  147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  147,    0,
        0,    0,    0,    0,    0,    0,    0,  147,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  150,  150,  150,    0,  150,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  150,    0,

        0,    0,    0,    0,    0,    0,    0,  150,  151,    0,
      151,    0,    0,  151,    0,    0,    0,    0,    0,  151,
      151,  151,  151,    0,    0,    0,    0,    0,    0,    0,
      151,  152,    0,  152,    0,    0,  152,    0,    0,    0,
        0,    0,  152,  152,  152,  152,    0,    0,    0,    0,
        0,    0,    0,  152,  156,  156,  156,    0,  156,    0,
        0,    0,    0,  156,    0,    0,    0,  156,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  156,  157,  157,
      157,    0,  157,  157,    0,    0,    0,    0,    0,  157,
      157,  157,    0,    0,    0,    0,    0,    0,    0,    0,

      157,  157,  158,  158,  158,    0,  158,  158,    0,    0,
        0,    0,    0,  158,  158,  158,    0,    0,    0,    0,
        0,    0,    0,    0,  158,  158,  159,  159,  159,    0,
      159,    0,    0,    0,    0,  159,    0,    0,    0,  159,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  159,
      161,  161,  161,    0,  161,  161,    0,    0,    0,    0,
        0,  161,  161,  161,    0,    0,    0,    0,    0,    0,
        0,    0,  161,  161,  162,    0,  162,  162,  162,  162,
        0,    0,    0,    0,    0,  162,  162,  162,    0,    0,
        0,    0,    0,    0,    0,    0,  162,  165,  165,  165,

        0,  165,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      165,  167,    0,  167,  167,  167,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  169,  169,  169,  169,    0,  169,    0,    0,
        0,    0,    0,  169,  169,  169,    0,    0,    0,    0,
        0,    0,    0,    0,  169,  169,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  173,    0,  173,  173,  173,  173,    0,    0,
        0,    0,    0,  173,  173,  173,    0,    0,    0,    0,
        0,    0,    0,    0,  173,  174,    0,  174,  174,    0,
      174,    0,    0,    0,    0,    0,  174,  174,  174,    0,
        0,    0,    0,    0,    0,    0,    0,  174,  176,    0,
      176,  176,    0,  176,    0,    0,    0,    0,    0,  176,
      176,  176,    0,    0,    0,    0,    0,    0,    0,    0,
      176,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  180,  180,  180,

        0,  180,    0,    0,    0,  180,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      180,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  183,  183,  183,
        0,  183,    0,    0,    0,  183,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      183,  184,    0,  184,    0,    0,  184,    0,    0,  184,
        0,    0,  184,  184,  184,    0,    0,    0,    0,    0,
        0,    0,    0,  184,  185,    0,  185,    0,    0,  185,

        0,    0,  185,    0,    0,  185,  185,  185,    0,    0,
        0,    0,    0,    0,    0,    0,  185,  189,    0,  189,
        0,  189,  189,    0,    0,    0,    0,    0,  189,  189,
      189,    0,    0,    0,    0,    0,    0,    0,    0,  189,
      192,  192,  192,    0,    0,  192,    0,    0,    0,    0,
        0,  192,  192,  192,    0,    0,    0,    0,    0,    0,
        0,    0,  192,  192,  193,    0,    0,    0,    0,    0,
      193,  193,  193,    0,    0,    0,    0,    0,    0,    0,
        0,  193,  194,    0,  194,    0,  194,  194,  194,    0,
        0,    0,    0,  194,  194,  194,    0,    0,    0,    0,

        0,    0,    0,    0,  194,  198,  198,  198,    0,  198,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  198,  199,
        0,  199,    0,  199,    0,  199,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  201,  201,  201,    0,    0,  201,  201,    0,
        0,    0,    0,  201,  201,  201,    0,    0,    0,    0,
        0,    0,    0,    0,  201,  201,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  205,    0,  205,    0,  205,  205,  205,    0,
        0,    0,    0,  205,  205,  205,    0,    0,    0,    0,
        0,    0,    0,    0,  205,  206,    0,  206,    0,    0,
      206,  206,    0,    0,    0,    0,  206,  206,  206,    0,
        0,    0,    0,    0,    0,    0,    0,  206,  208,    0,
      208,    0,    0,  208,  208,    0,    0,    0,    0,  208,
      208,  208,    0,    0,    0,    0,    0,    0,    0,    0,
      208,  209,    0,  209,    0,  209,  209,    0,    0,    0,
        0,    0,  209,  209,  209,  209,    0,    0,    0,    0,

        0,    0,    0,  209,  212,  212,  212,    0,  212,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  212,    0,
        0,    0,    0,    0,    0,    0,    0,  212,  213,  213,
      213,    0,  213,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  213,    0,    0,    0,    0,    0,    0,    0,
        0,  213,  214,    0,  214,    0,  214,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  214,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  216,  216,  216,    0,    0,  216,    0,

        0,    0,    0,    0,  216,  216,  216,  216,    0,    0,
        0,    0,    0,    0,    0,  216,  216,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  220,    0,  220,    0,  220,  220,    0,
        0,    0,    0,    0,  220,  220,  220,  220,    0,    0,
        0,    0,    0,    0,    0,  220,  221,    0,  221,    0,
        0,  221,    0,    0,    0,    0,    0,  221,  221,  221,
      221,    0,    0,    0,    0,    0,    0,    0,  221,  222,
        0,  222,    0,    0,  222,    0,    0,    0,    0,    0,

      222,  222,  222,  222,    0,    0,    0,    0,    0,    0,
        0,  222,  223,    0,  223,    0,    0,  223,    0,    0,
        0,    0,    0,  223,  223,  223,  223,    0,    0,    0,
        0,    0,    0,    0,  223,  224,  224,    0,    0,    0,
        0,    0,  224,  224,  224,    0,    0,  224,    0,    0,
        0,    0,    0,  224,  225,  225,    0,    0,    0,  225,
        0,  225,  225,  225,    0,    0,    0,    0,    0,    0,
        0,    0,  225,  226,  226,  226,    0,  226,    0,    0,
        0,    0,  226,    0,    0,    0,  226,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  226,  227,  227,  227,

        0,  227,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      227,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  230,  230,    0,
        0,    0,    0,    0,  230,  230,  230,    0,    0,    0,
        0,    0,    0,    0,    0,  230,  233,  233,  233,    0,
      233,  233,    0,    0,    0,    0,    0,  233,  233,  233,
        0,    0,    0,    0,    0,    0,    0,    0,  233,  233,
      234,  234,    0,    0,    0,    0,    0,  234,  234,  234,

        0,    0,    0,    0,    0,    0,    0,    0,  234,  235,
      235,  235,    0,  235,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  235,  236,    0,  236,  236,  236,  236,    0,
        0,    0,    0,    0,  236,  236,  236,    0,    0,    0,
        0,    0,    0,    0,    0,  236,  238,    0,  238,  238,
      238,  238,    0,    0,    0,    0,    0,  238,  238,  238,
        0,    0,    0,    0,    0,    0,    0,  238,  238,  239,
        0,  239,  239,  239,  240,    0,  240,  240,  240,  240,
        0,    0,    0,    0,    0,  240,  240,  240,    0,    0,

        0,    0,    0,    0,    0,    0,  240,  244,    0,  244,
      244,  244,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  244,  245,
      245,  245,    0,    0,  245,    0,    0,    0,    0,    0,
      245,  245,  245,    0,    0,    0,    0,    0,    0,    0,
        0,  245,  245,  246,  246,  246,  246,    0,  246,    0,
        0,    0,    0,    0,  246,  246,  246,    0,    0,    0,
        0,    0,    0,    0,    0,  246,  246,  247,    0,  247,
      247,    0,  247,    0,    0,    0,    0,    0,  247,  247,
      247,    0,    0,    0,    0,    0,    0,    0,    0,  247,

      248,    0,  248,    0,  248,  248,    0,    0,  248,    0,
        0,  248,  248,  248,    0,    0,    0,    0,    0,    0,
        0,    0,  248,  251,  251,  251,    0,  251,    0,    0,
        0,  251,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  251,  252,  252,  252,
        0,  252,    0,    0,    0,  252,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      252,  253,    0,  253,    0,  253,    0,    0,    0,  253,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  255,  255,  255,    0,
        0,  255,    0,    0,  255,    0,    0,  255,  255,  255,
        0,    0,    0,    0,    0,    0,    0,    0,  255,  255,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  259,    0,  259,    0,
      259,  259,    0,    0,  259,    0,    0,  259,  259,  259,
        0,    0,    0,    0,    0,    0,    0,    0,  259,  260,
        0,  260,    0,    0,  260,    0,    0,  260,    0,    0,
      260,  260,  260,    0,    0,    0,    0,    0,    0,    0,

        0,  260,  261,    0,  261,    0,    0,  261,    0,    0,
      261,    0,    0,  261,  261,  261,    0,    0,    0,    0,
        0,    0,    0,    0,  261,  262,    0,  262,    0,    0,
      262,    0,    0,  262,    0,    0,  262,  262,  262,    0,
        0,    0,    0,    0,    0,    0,    0,  262,  263,  263,
      263,    0,  263,  263,    0,    0,    0,    0,    0,  263,
      263,  263,    0,    0,    0,    0,    0,    0,    0,    0,
      263,  263,  266,    0,  266,    0,  266,  266,    0,    0,
        0,    0,    0,  266,  266,  266,    0,    0,    0,    0,
        0,    0,    0,    0,  266,  267,  267,  267,    0,  267,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  267,  268,
      268,  268,    0,    0,  268,    0,    0,    0,    0,    0,
      268,  268,  268,    0,    0,    0,    0,    0,    0,    0,
        0,  268,  268,  269,  269,  269,    0,    0,  269,    0,
        0,    0,    0,    0,  269,  269,  269,    0,    0,    0,
        0,    0,    0,    0,    0,  269,  269,  270,    0,    0,
        0,    0,    0,  270,  270,  270,    0,    0,    0,    0,
        0,    0,    0,    0,  270,  271,    0,    0,    0,    0,
        0,  271,  271,  271,    0,    0,    0,    0,    0,    0,

        0,    0,  271,  272,    0,  272,    0,    0,  272,    0,
        0,    0,    0,    0,  272,  272,  272,    0,    0,    0,
        0,    0,    0,    0,    0,  272,  273,    0,  273,    0,
      273,  273,  273,    0,    0,    0,    0,  273,  273,  273,
        0,    0,    0,    0,    0,    0,    0,    0,  273,  274,
        0,  274,    0,  274,  274,  274,    0,    0,    0,    0,
      274,  274,  274,    0,    0,    0,    0,    0,    0,    0,
      274,  274,  275,    0,  275,    0,  275,    0,  275,  277,
        0,  277,    0,  277,  277,  277,    0,    0,    0,    0,
      277,  277,  277,    0,    0,    0,    0,    0,    0,    0,

        0,  277,  280,    0,  280,    0,  280,    0,  280,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  280,  283,  283,  283,    0,    0,  283,
      283,    0,    0,    0,    0,  283,  283,  283,    0,    0,
        0,    0,    0,    0,    0,    0,  283,  283,  284,    0,
      284,    0,    0,  284,  284,    0,    0,    0,    0,  284,
      284,  284,    0,    0,    0,    0,    0,    0,    0,    0,
      284,  285,    0,  285,    0,  285,  285,    0,    0,    0,
        0,    0,  285,  285,  285,  285,    0,    0,    0,    0,
        0,    0,    0,  285,  286,    0,  286,    0,  286,  286,

        0,    0,    0,    0,    0,  286,  286,  286,  286,    0,
        0,    0,    0,    0,    0,  286,  286,  287,    0,  287,
        0,  287,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  287,  288,    0,  288,    0,  288,  288,    0,    0,
        0,    0,    0,  288,  288,  288,  288,    0,    0,    0,
        0,    0,    0,    0,  288,  292,    0,  292,    0,  292,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  292,
        0,    0,    0,    0,    0,    0,  292,  294,  294,  294,
        0,    0,  294,    0,    0,    0,    0,    0,  294,  294,
      294,  294,    0,    0,    0,    0,    0,    0,    0,  294,

      294,  295,  295,  295,    0,    0,  295,    0,    0,    0,
        0,    0,  295,  295,  295,  295,    0,    0,    0,    0,
        0,    0,    0,  295,  295,  296,    0,  296,    0,    0,
      296,    0,    0,    0,    0,    0,  296,  296,  296,  296,
        0,    0,    0,    0,    0,    0,    0,  296,  297,    0,
      297,  297,    0,    0,    0,    0,    0,  297,  297,  297,
        0,    0,    0,    0,    0,    0,    0,    0,  297,  298,
      298,    0,    0,    0,  298,    0,  298,  298,  298,    0,
        0,    0,    0,    0,    0,    0,    0,  298,  299,  299,
        0,    0,    0,  299,    0,  299,  299,  299,    0,    0,

        0,    0,    0,    0,    0,  299,  299,  301,  301,    0,
        0,    0,    0,    0,  301,  301,  301,    0,    0,    0,
        0,    0,    0,    0,    0,  301,  302,    0,  302,    0,
      302,  302,    0,    0,    0,    0,    0,  302,  302,  302,
        0,    0,    0,    0,    0,    0,    0,    0,  302,  303,
      303,  303,    0,  303,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  303,  305,    0,    0,    0,    0,  305,    0,
        0,    0,  305,    0,    0,    0,    0,    0,    0,    0,
      305,  307,  307,    0,    0,    0,    0,    0,  307,  307,

      307,    0,    0,    0,    0,    0,    0,    0,  307,  307,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  309,    0,  309,  309,
      309,  309,    0,    0,    0,    0,    0,  309,  309,  309,
        0,    0,    0,    0,    0,    0,    0,    0,  309,  311,
        0,  311,  311,  311,  311,    0,    0,    0,    0,    0,
      311,  311,  311,    0,    0,    0,    0,    0,    0,    0,
      311,  311,  312,    0,  312,  312,  312,  312,    0,    0,
        0,    0,    0,  312,  312,  312,    0,    0,    0,    0,

        0,    0,    0,    0,  312,  313,  313,  313,  313,  313,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  313,  314,
      314,  314,  314,    0,  314,    0,    0,    0,    0,    0,
      314,  314,  314,    0,    0,    0,    0,    0,    0,    0,
        0,  314,  314,  316,  316,  316,  316,    0,  316,    0,
        0,    0,    0,    0,  316,  316,  316,    0,    0,    0,
        0,    0,    0,    0,    0,  316,  316,  317,    0,  317,
      317,    0,  317,    0,    0,    0,    0,    0,  317,  317,
      317,    0,    0,    0,    0,    0,    0,    0,    0,  317,

      318,    0,  318,  318,    0,  318,    0,    0,    0,    0,
        0,  318,  318,  318,    0,    0,    0,    0,    0,    0,
        0,    0,  318,  320,    0,  320,  320,    0,  320,    0,
        0,    0,    0,    0,  320,  320,  320,    0,    0,    0,
        0,    0,    0,    0,    0,  320,  321,    0,  321,    0,
      321,  321,    0,    0,  321,    0,    0,  321,  321,  321,
        0,    0,    0,    0,    0,    0,    0,    0,  321,  322,
        0,  322,    0,  322,  322,    0,    0,  322,    0,    0,
      322,  322,  322,    0,    0,    0,    0,    0,    0,    0,
      322,  322,  323,    0,  323,    0,  323,    0,    0,    0,

      323,  325,    0,  325,    0,  325,  325,    0,    0,  325,
        0,    0,  325,  325,  325,    0,    0,    0,    0,    0,
        0,    0,    0,  325,  328,    0,  328,    0,  328,    0,
        0,    0,  328,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  328,  330,  330,  330,    0,
        0,  330,    0,    0,  330,    0,    0,  330,  330,  330,
        0,    0,    0,    0,    0,    0,    0,    0,  330,  330,
      331,  331,  331,    0,    0,  331,    0,    0,  331,    0,
        0,  331,  331,  331,    0,    0,    0,    0,    0,    0,
        0,    0,  331,  331,  332,    0,  332,    0,    0,  332,

        0,    0,  332,    0,    0,  332,  332,  332,    0,    0,
        0,    0,    0,    0,    0,    0,  332,  333,  333,  333,
        0,  333,  333,    0,    0,    0,    0,    0,  333,  333,
      333,    0,    0,    0,    0,    0,    0,    0,    0,  333,
      333,  334,  334,  334,    0,  334,  334,    0,    0,    0,
        0,    0,  334,  334,  334,    0,    0,    0,    0,    0,
        0,    0,    0,  334,  334,  335,  335,  335,    0,  335,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  335,  336,
      336,  336,    0,  336,  336,    0,    0,    0,    0,    0,

      336,  336,  336,    0,    0,    0,    0,    0,    0,    0,
        0,  336,  336,  337,  337,  337,    0,  337,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  337,  339,    0,  339,
        0,    0,  339,    0,    0,    0,    0,    0,  339,  339,
      339,    0,    0,    0,    0,    0,    0,    0,    0,  339,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  341,    0,  341,    0,
      341,  341,  341,    0,    0,    0,    0,  341,  341,  341,

        0,    0,    0,    0,    0,    0,    0,    0,  341,  342,
        0,  342,    0,  342,  342,  342,    0,    0,    0,    0,
      342,  342,  342,    0,    0,    0,    0,    0,    0,    0,
      342,  342,  344,    0,  344,    0,  344,  344,  344,    0,
        0,    0,    0,  344,  344,  344,    0,    0,    0,    0,
        0,    0,    0,    0,  344,  345,  345,  345,    0,  345,
        0,  345,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  345,  346,
      346,  346,    0,    0,  346,  346,    0,    0,    0,    0,
      346,  346,  346,    0,    0,    0,    0,    0,    0,    0,

        0,  346,  346,  348,  348,  348,    0,    0,  348,  348,
        0,    0,    0,    0,  348,  348,  348,    0,    0,    0,
        0,    0,    0,    0,    0,  348,  348,  349,    0,  349,
        0,    0,  349,  349,    0,    0,    0,    0,  349,  349,
      349,    0,    0,    0,    0,    0,    0,    0,    0,  349,
      350,    0,  350,    0,    0,  350,  350,    0,    0,    0,
        0,  350,  350,  350,    0,    0,    0,    0,    0,    0,
        0,    0,  350,  352,    0,  352,    0,    0,  352,  352,
        0,    0,    0,    0,  352,  352,  352,    0,    0,    0,
        0,    0,    0,    0,    0,  352,  353,  353,  353,  353,

      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  354,    0,  354,    0,  354,  354,    0,    0,
        0,    0,    0,  354,  354,  354,  354,    0,    0,    0,
        0,    0,    0,    0,  354,  355,    0,  355,    0,  355,
      355,    0,    0,    0,    0,    0,  355,  355,  355,  355,
        0,    0,    0,    0,    0,    0,  355,  355,  356,    0,
      356,    0,  356,  356,    0,    0,    0,    0,    0,  356,
      356,  356,  356,    0,    0,    0,    0,    0,    0,    0,
      356,  358,  358,  358,    0,  358,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  358,    0,    0,    0,    0,
        0,    0,    0,    0,  358,  359,  359,  359,    0,    0,
      359,    0,    0,    0,    0,    0,  359,  359,  359,  359,
        0,    0,    0,    0,    0,    0,    0,  359,  359,  360,
      360,  360,    0,    0,  360,    0,    0,    0,    0,    0,
      360,  360,  360,  360,    0,    0,    0,    0,    0,    0,
        0,  360,  360,  361,  361,  361,    0,    0,  361,    0,
        0,    0,    0,    0,  361,  361,  361,  361,    0,    0,
        0,    0,    0,    0,    0,  361,  361,  362,    0,  362,
        0,    0,  362,    0,    0,    0,    0,    0,  362,  362,

      362,  362,    0,    0,    0,    0,    0,    0,    0,  362,
      363,    0,  363,    0,    0,  363,    0,    0,    0,    0,
        0,  363,  363,  363,  363,    0,    0,    0,    0,    0,
        0,    0,  363,  364,    0,  364,    0,    0,  364,    0,
        0,    0,    0,    0,  364,  364,  364,  364,    0,    0,
        0,    0,    0,    0,    0,  364,  366,  366,    0,    0,
        0,    0,    0,  366,  366,  366,    0,    0,    0,    0,
        0,    0,    0,    0,  366,  368,  368,    0,    0,    0,
        0,    0,  368,  368,  368,    0,    0,    0,    0,    0,
        0,    0,  368,  368,  370,    0,  370,    0,  370,  370,

        0,    0,    0,    0,    0,  370,  370,  370,    0,    0,
        0,    0,    0,    0,    0,    0,  370,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  372,  372,    0,    0,    0,    0,    0,
      372,  372,  372,    0,    0,    0,    0,    0,    0,    0,
        0,  372,  373,  373,    0,    0,    0,    0,    0,  373,
      373,  373,    0,    0,    0,    0,    0,    0,    0,  373,
      373,  374,    0,  374,    0,  374,  374,    0,    0,    0,
        0,    0,  374,  374,  374,    0,    0,    0,    0,    0,

        0,    0,    0,  374,  376,  376,  376,    0,  376,    0,
        0,    0,    0,  376,    0,    0,    0,  376,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  376,  377,  377,
      377,    0,  377,  377,    0,    0,    0,    0,    0,  377,
      377,  377,    0,    0,    0,    0,    0,    0,    0,    0,
      377,  377,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  381,  381,
      381,  381,  381,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  381,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  383,  383,
      383,    0,  383,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  383,  384,  384,  384,  384,  384,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  384,  385,    0,  385,  385,
        0,  385,    0,    0,    0,    0,    0,  385,  385,  385,
        0,    0,    0,    0,    0,    0,    0,    0,  385,  387,

        0,  387,  387,    0,  387,    0,    0,    0,    0,    0,
      387,  387,  387,    0,    0,    0,    0,    0,    0,    0,
        0,  387,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  389,    0,
      389,    0,  389,  389,    0,    0,  389,    0,    0,  389,
      389,  389,    0,    0,    0,    0,    0,    0,    0,    0,
      389,  390,    0,  390,    0,  390,  390,    0,    0,  390,
        0,    0,  390,  390,  390,    0,    0,    0,    0,    0,
        0,    0,  390,  390,  392,    0,  392,    0,  392,  392,

        0,    0,  392,    0,    0,  392,  392,  392,    0,    0,
        0,    0,    0,    0,    0,    0,  392,  393,  393,  393,
        0,  393,    0,    0,    0,  393,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      393,  394,  394,  394,    0,    0,  394,    0,    0,  394,
        0,    0,  394,  394,  394,    0,    0,    0,    0,    0,
        0,    0,    0,  394,  394,  395,  395,  395,    0,    0,
      395,    0,    0,  395,    0,    0,  395,  395,  395,    0,
        0,    0,    0,    0,    0,    0,    0,  395,  395,  396,
      396,  396,    0,    0,  396,    0,    0,  396,    0,    0,

      396,  396,  396,    0,    0,    0,    0,    0,    0,    0,
        0,  396,  396,  397,    0,  397,    0,    0,  397,    0,
        0,  397,    0,    0,  397,  397,  397,    0,    0,    0,
        0,    0,    0,    0,    0,  397,  398,    0,  398,    0,
        0,  398,    0,    0,  398,    0,    0,  398,  398,  398,
        0,    0,    0,    0,    0,    0,    0,    0,  398,  400,
        0,  400,    0,    0,  400,    0,    0,  400,    0,    0,
      400,  400,  400,    0,    0,    0,    0,    0,    0,    0,
        0,  400,  401,  401,    0,    0,    0,    0,    0,  401,
      401,  401,    0,    0,    0,    0,    0,    0,    0,    0,

      401,  405,  405,  405,    0,  405,  405,    0,    0,    0,
        0,    0,  405,  405,  405,    0,    0,    0,    0,    0,
        0,    0,    0,  405,  405,  406,  406,    0,    0,    0,
        0,    0,  406,  406,  406,    0,    0,    0,    0,    0,
        0,    0,    0,  406,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      409,  409,  409,    0,  409,    0,  409,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  409,  411,  411,  411,  411,  411,  411,

      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      412,  412,  412,    0,  412,    0,  412,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  412,  413,  413,  413,    0,  413,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  413,  414,    0,
      414,    0,    0,  414,  414,    0,    0,    0,    0,  414,
      414,  414,    0,    0,    0,    0,    0,    0,    0,    0,
      414,  416,    0,  416,    0,    0,  416,  416,    0,    0,

        0,    0,  416,  416,  416,    0,    0,    0,    0,    0,
        0,    0,    0,  416,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      419,  419,  419,    0,  419,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  419,    0,    0,    0,    0,    0,
        0,    0,    0,  419,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      422,  422,  422,    0,  422,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  422,    0,    0,    0,    0,    0,
        0,    0,    0,  422,  425,    0,  425,    0,    0,  425,
        0,    0,    0,    0,    0,  425,  425,  425,  425,    0,
        0,    0,    0,    0,    0,    0,  425,  428,  428,  428,
        0,  428,  428,    0,    0,    0,    0,    0,  428,  428,
      428,    0,    0,    0,    0,    0,    0,    0,    0,  428,
      428,  430,  430,    0,    0,    0,    0,    0,  430,  430,
      430,    0,    0,    0,    0,    0,    0,    0,    0,  430,
      432,    0,  432,    0,  432,  432,    0,    0,    0,    0,
        0,  432,  432,  432,    0,    0,    0,    0,    0,    0,

        0,    0,  432,  435,  435,  435,    0,  435,    0,    0,
        0,    0,  435,    0,    0,    0,  435,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  435,  436,  436,  436,
        0,  436,  436,    0,    0,    0,    0,    0,  436,  436,
      436,    0,    0,    0,    0,    0,    0,    0,    0,  436,
      436,  437,  437,  437,    0,  437,  437,    0,    0,    0,
        0,    0,  437,  437,  437,    0,    0,    0,    0,    0,
        0,    0,    0,  437,  437,  438,  438,  438,    0,  438,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  438,  440,

      440,  440,    0,  440,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  440,  442,    0,  442,  442,  442,  442,    0,
        0,    0,    0,    0,  442,  442,  442,    0,    0,    0,
        0,    0,    0,    0,    0,  442,  443,    0,  443,  443,
      443,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  448,    0,  448,  448,  448,  448,    0,
        0,    0,    0,    0,  448,  448,  448,    0,    0,    0,
        0,    0,    0,    0,    0,  448,  451,  451,  451,    0,
      451,    0,    0,    0,  451,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  451,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  458,    0,  458,    0,
        0,  458,    0,    0,  458,    0,    0,  458,  458,  458,
        0,    0,    0,    0,    0,    0,    0,    0,  458,  459,

        0,  459,    0,  459,  459,  459,    0,    0,    0,    0,
      459,  459,  459,    0,    0,    0,    0,    0,    0,    0,
        0,  459,  460,    0,  460,    0,  460,    0,  460,  465,
        0,  465,    0,  465,  465,  465,    0,    0,    0,    0,
      465,  465,  465,    0,    0,    0,    0,    0,    0,    0,
        0,  465,  466,    0,  466,    0,  466,  466,    0,    0,
        0,    0,    0,  466,  466,  466,  466,    0,    0,    0,
        0,    0,    0,    0,  466,  467,    0,  467,    0,  467,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  467,
      472,    0,  472,    0,  472,  472,    0,    0,    0,    0,

        0,  472,  472,  472,  472,    0,    0,    0,    0,    0,
        0,    0,  472,  473,  473,  473,    0,  473,  473,    0,
        0,    0,    0,    0,  473,  473,  473,    0,    0,    0,
        0,    0,    0,    0,    0,  473,  473,  475,  475,  475,
        0,  475,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      475,  476,  476,  476,    0,  476,  476,    0,    0,    0,
        0,    0,  476,  476,  476,    0,    0,    0,    0,    0,
        0,    0,    0,  476,  476,  477,  477,  477,    0,  477,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  477,  478,
      478,    0,    0,    0,  478,    0,  478,  478,  478,    0,
        0,    0,    0,    0,    0,    0,    0,  478,  480,  480,
        0,    0,    0,    0,    0,  480,  480,  480,    0,    0,
        0,    0,    0,    0,    0,    0,  480,  483,  483,  483,
        0,  483,  483,    0,    0,    0,    0,    0,  483,  483,
      483,    0,    0,    0,    0,    0,    0,    0,    0,  483,
      483,  484,  484,    0,    0,    0,    0,    0,  484,  484,
      484,    0,    0,    0,    0,    0,    0,    0,    0,  484,
      485,  485,  485,    0,  485,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  485,  487,    0,  487,    0,  487,  487,
        0,    0,  487,    0,    0,  487,  487,  487,    0,    0,
        0,    0,    0,    0,    0,    0,  487,  488,    0,  488,
        0,  488,    0,    0,    0,  488,  493,    0,  493,    0,
      493,  493,    0,    0,  493,    0,    0,  493,  493,  493,
        0,    0,    0,    0,    0,    0,    0,    0,  493,  494,
      494,    0,    0,    0,    0,    0,  494,  494,  494,    0,
        0,    0,    0,    0,    0,    0,    0,  494,  495,  495,
      495,    0,  495,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  495,  499,  499,  499,    0,  499,  499,    0,    0,
        0,    0,    0,  499,  499,  499,    0,    0,    0,    0,
        0,    0,    0,    0,  499,  499,  500,  500,    0,    0,
        0,    0,    0,  500,  500,  500,    0,    0,    0,    0,
        0,    0,    0,    0,  500,  504,    0,  504,    0,  504,
      504,    0,    0,    0,    0,    0,  504,  504,  504,    0,
        0,    0,    0,    0,    0,    0,    0,  504,  506,  506,
      506,    0,  506,  506,    0,    0,    0,    0,    0,  506,
      506,  506,    0,    0,    0,    0,    0,    0,    0,    0,

      506,  506,  509,    0,  509,    0,  509,  509,    0,    0,
        0,    0,    0,  509,  509,  509,    0,    0,    0,    0,
        0,    0,    0,    0,  509,  510,  510,  510,    0,  510,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  510,  511,
      511,  511,    0,  511,  511,    0,    0,    0,    0,    0,
      511,  511,  511,    0,    0,    0,    0,    0,    0,    0,
        0,  511,  511,  513,  513,  513,    0,  513,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  513,  514,  514,  514,

        0,  514,  514,    0,    0,    0,    0,    0,  514,  514,
      514,    0,    0,    0,    0,    0,    0,    0,    0,  514,
      514,  515,  515,  515,    0,  515,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  515,  520,  520,  520,    0,  520,
      520,    0,    0,    0,    0,    0,  520,  520,  520,    0,
        0,    0,    0,    0,    0,    0,    0,  520,  520,  523,
        0,    0,    0,  523,  524,  524,    0,  524,  524,  525,
        0,    0,    0,  525,  526,  526,    0,  526,  526,  527,
      527,    0,  527,  527,  528,  528,    0,  528,  528,  529,

        0,    0,    0,  529,  530,  530,    0,  530,  530,  531,
      531,    0,  531,  531,  532,  532,    0,  532,  532,  533,
      533,    0,  533,  533,  534,  534,  534,  534,  534,  535,
      535,    0,  535,  535,  536,  536,    0,  536,  536,  537,
      537,    0,  537,  537,  539,  539,    0,  539,  539,  540,
      540,    0,  540,  540,  541,  541,    0,  541,  541,  542,
        0,    0,    0,  542,  543,    0,    0,    0,  543,  544,
      544,    0,  544,  544,  545,  545,    0,  545,  545,  546,
      546,    0,  546,  546,  547,  547,    0,  547,  547,  548,
      548,    0,  548,  548,  549,  549,  549,  549,  549,  550,

      550,  550,  550,  550,  551,  551,  551,  551,  551,  552,
      552,    0,  552,  552,  553,  553,    0,  553,  553,  554,
      554,    0,  554,  554,  555,    0,    0,    0,  555,  556,
      556,  556,  556,  556,  557,  557,  557,  557,  557,  559,
      559,    0,  559,  559,  560,  560,    0,  560,  560,  561,
        0,    0,    0,  561,  562,    0,    0,    0,  562,  563,
        0,    0,    0,  563,  564,  564,  564,  564,  564,  565,
      565,  565,  565,  565,  566,  566,  566,  566,  566,  567,
      567,    0,  567,  567,  568,  568,  568,  568,  568,  569,
      569,  569,  569,  569,  570,  570,    0,  570,  570,  571,

      571,    0,  571,  571,  572,  572,  572,  572,  572,  573,
      573,  573,  573,  573,  574,  574,  574,  574,  574,  575,
        0,    0,    0,  575,  576,  576,    0,  576,  576,  577,
      577,  577,  577,  577,  578,  578,    0,  578,  578,  579,
      579,    0,  579,  579,  580,  580,  580,  580,  580,  581,
      581,    0,  581,  581,  582,  582,    0,  582,  582,  583,
      583,  583,  583,  583,  584,  584,  584,  584,  584,  585,
      585,    0,  585,  585,  586,  586,    0,  586,  586,  587,
        0,    0,    0,  587,  588,  588,    0,  588,  588,  589,
        0,    0,    0,  589,  590,  590,  590,  590,  590,  591,

        0,    0,    0,  591,  592,  592,    0,  592,  592,  593,
      593,    0,  593,  593,  594,  594,    0,  594,  594,  595,
      595,  595,  595,  595,  596,  596,    0,  596,  596,  597,
      597,    0,  597,  597,  598,  598,    0,  598,  598,  599,
      599,  599,  599,  599,  600,  600,    0,  600,  600,  601,
      601,  601,  601,  601,  602,  602,    0,  602,  602,  603,
      603,  603,  603,  603,  604,  604,    0,  604,  604,  605,
      605,    0,  605,  605,  606,    0,    0,    0,  606,  607,
        0,    0,    0,  607,  608,  608,  608,  608,  608,  609,
      609,  609,  609,  609,  610,    0,    0,    0,  610,  611,

        0,    0,    0,  611,  612,  612,  612,  612,  612,  613,
      613,    0,  613,  613,  614,  614,    0,  614,  614,  615,
      615,    0,  615,  615,  616,  616,    0,  616,  616,  617,
      617,  617,  617,  617,  618,  618,  618,  618,  618,  619,
      619,    0,  619,  619,  620,  620,    0,  620,  620,  621,
      621,  621,  621,  621,  622,  622,    0,  622,  622,  623,
      623,  623,  623,  623,  624,  624,    0,  624,  624,  625,
      625,  625,  625,  625,  626,  626,    0,  626,  626,  627,
      627,    0,  627,  627,  628,  628,  628,  628,  628,  629,
      629,    0,  629,  629,  630,  630,  630,  630,  630,  631,

      631,  631,  631,  631,  632,    0,    0,    0,  632,  633,
      633,    0,  633,  633,  634,  634,    0,  634,  634,  635,
      635,    0,  635,  635,  636,  636,    0,  636,  636,  637,
      637,    0,  637,  637,  638,  638,  638,  638,  638,  639,
      639,    0,  639,  639,  640,  640,    0,  640,  640,  641,
      641,    0,  641,  641,  642,  642,    0,  642,  642,  643,
      643,    0,  643,  643,  644,  644,  644,  644,  644,  645,
      645,  645,  645,  645,  646,  646,    0,  646,  646,  647,
        0,    0,  647,  647,  648,    0,    0,    0,  648,  649,
        0,    0,    0,  649,  650,    0,    0,    0,  650,  651,

      651,    0,  651,  651,  652,  652,  652,  652,  652,  653,
        0,    0,    0,  653,  654,  654,    0,  654,  654,  655,
      655,    0,  655,  655,  656,  656,  656,  656,  656,  657,
      657,  657,  657,  657,  658,  658,  658,  658,  658,  659,
      659,    0,  659,  659,  660,  660,    0,  660,  660,  661,
      661,    0,  661,  661,  662,  662,    0,  662,  662,  663,
      663,    0,  663,  663,  664,  664,    0,  664,  664,  665,
      665,  665,  665,  665,  666,  666,  666,  666,  666,  667,
      667,    0,  667,  667,  668,  668,  668,  668,  668,  669,
      669,  669,  669,  669,  670,  670,  670,  670,  670,  671,

      671,    0,  671,  671,  672,  672,    0,  672,  672,  673,
      673,    0,  673,  673,  674,  674,  674,  674,  674,  675,
      675,  675,  675,  675,  676,  676,  676,  676,  676,  677,
      677,    0,  677,  677,  678,  678,    0,  678,  678,  679,
      679,    0,  679,  679,  680,  680,    0,  680,  680,  681,
      681,  681,  681,  681,  682,  682,  682,  682,  682,  683,
      683,  683,  683,  683,  684,  684,    0,  684,  684,  685,
      685,    0,  685,  685,  686,    0,    0,    0,  686,  687,
        0,    0,  687,  687,  688,    0,    0,    0,  688,  689,
      689,    0,  689,  689,  690,    0,    0,    0,  690,  691,

      691,    0,  691,  691,  692,    0,    0,    0,  692,  693,
      693,  693,  693,  693,  694,  694,  694,  694,  694,  695,
      695,  695,  695,  695,  696,  696,    0,  696,  696,  697,
      697,    0,  697,  697,  698,  698,    0,  698,  698,  699,
      699,    0,  699,  699,  700,  700,  700,  700,  700,  701,
      701,  701,  701,  701,  702,  702,  702,  702,  702,  703,
      703,    0,  703,  703,  704,  704,    0,  704,  704,  705,
        0,    0,    0,  705,  706,    0,    0,    0,  706,  707,
      707,  707,  707,  707,  708,  708,  708,  708,  708,  709,
      709,    0,  709,  709,  710,  710,    0,  710,  710,  711,

      711,  711,  711,  711,  712,  712,  712,  712,  712,  713,
      713,  713,  713,  713,  714,  714,  714,  714,  714,  715,
      715,    0,  715,  715,  716,  716,    0,  716,  716,  717,
      717,    0,  717,  717,  718,  718,    0,  718,  718,  719,
      719,    0,  719,  719,  720,  720,    0,  720,  720,  721,
      721,  721,  721,  721,  722,  722,  722,  722,  722,  723,
        0,    0,    0,  723,  724,    0,    0,    0,  724,  725,
        0,    0,    0,  725,  726,    0,    0,    0,  726,  727,
      727,    0,  727,  727,  728,  728,    0,  728,  728,  729,
        0,    0,    0,  729,  730,    0,    0,    0,  730,  731,

      731,    0,  731,  731,  732,  732,  732,  732,  732,  733,
      733,  733,  733,  733,  734,  734,  734,  734,  734,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[19] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <limits.h>
#include <cstring>
#include <string>
#include <sstream>
#include <vector>
#include <sys/types.h>
#include <pwd.h>
#include <unistd.h>
#include <iostream>
#include <stdlib.h>
#include <wait.h>
#include "y.tab.hh"
#include "shell.hh"

////////////  Start added code ///////////


extern "C" char * read_line();

int mygetc(FILE * f) {
	static char *p;
	char ch;

	if (!isatty(0)) {
		// stdin is not a tty. Call real getc
    	return getc(f);
	}

	// stdin is a tty. Call our read_line.
	if (p==NULL || *p == 0) {
		char * s = read_line();	
		p = s;
	}

	ch = *p;
	p++;

	return ch;
}

#undef getc
#define getc(f) mygetc(f)

/////////// End added code ///////////


static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
	unput(c);
}

extern char ** environ;
using namespace std;
#line 2500 "lex.yy.cc"
#line 2501 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 70 "shell.l"


#line 2721 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 523 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7920 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 72 "shell.l"
{
	return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 76 "shell.l"
{
	/* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 80 "shell.l"
{
	return PIPE;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "shell.l"
{
	return LESS;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 89 "shell.l"
{
	return GREATGREATAMPERSAND;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 93 "shell.l"
{
	return GREATGREAT;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 97 "shell.l"
{
	return GREATAMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 102 "shell.l"
{
	return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 106 "shell.l"
{
	return GREAT;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 110 "shell.l"
{
	return AMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 114 "shell.l"
{
	//tilde expansion
	string text(yytext);
	string name, suff;
	char * temp;
	int start, end;
	//string to hold value
	string val;

	if(text.length() > 1)
	{
		//case for different tilde
		if(text.find("/") != string::npos)
		{
			end = text.find("/");
			name = text.substr(1, end - 1);
			suff = text.substr(end);
		}
		else
		{
			name = text.substr(1, text.size() - 1);
			suff = "";
		}
		//find directory for name
		if(getpwnam(name.c_str()))
		{
			temp = getpwnam(name.c_str())->pw_dir;	
			name = temp;
		}
		text = name + suff;
	}
	else
	{
		//case for home tilde
		text = getenv("HOME");
	}

	//set cpp_string to text and return
	const char *ret = text.c_str();
	yylval.cpp_string = new string(ret);
	return WORD;
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 157 "shell.l"
{
	//env variable expansion
	string text(yytext);
	string pref, temp, suff, name;
	int start, stop;
	//string to hold value
	string val;

	while(text.find("${") != -1)
	{
		start = text.find("${");
		stop = text.find("}");
		pref = text.substr(0, start);
		name = text.substr(start + 2, stop - start - 2);
		suff = text.substr(stop + 1);
		//special cases: $, ?, !, _, SHELL
		if(name == "$")
		{
			val = to_string((int)getpid());
		}
		else if(name == "?")
		{
			val = to_string(retcode);
		}
		else if(name == "!")
		{
			if(!backpid)
			{
				val = "";
			}
			else
			{
				val = to_string(backpid);
			}
		}
		else if(name == "_")
		{
			if(lastarg == "")
			{
				val = ""; 
			}
			else
			{
				val = lastarg; 
			}
		}
		else if(name == "SHELL")
		{
			val = path;
		}
		else
		{
			//find variable value in environ
			if(getenv(name.c_str()))
			{
				val = string(getenv(name.c_str()));
			}
			else
			{
				perror("getenv");
			}
		}
		//insert expanded string (val) into text
		text = pref + val + suff;
	}
	//set cpp_string to text and return
	const char *ret = text.c_str();
	yylval.cpp_string = new string(ret);
	return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 228 "shell.l"
{
	//subshell:
	//substring command line from parentheses/backticks
	yylval.string_val = strdup(yytext);
	//dollar sign case
	if(yytext[0] == '$')
	{
		strncpy(yylval.string_val, yytext + 2, yyleng - 3);
		yylval.string_val[yyleng - 3] = '\0';
	}
	//backtick case
	if(yytext[0] == '`')
	{
		strncpy(yylval.string_val, yytext + 1, yyleng - 2);
		yylval.string_val[yyleng - 2] = '\0';
	}
	//concat "\nexit\n" to command
	strcat(yylval.string_val, "\nexit\n");
	//create pipes:
	//pipes for subshell input, output
	
	//buffer for output
	char buffer[4096];

	//for /proc/self/exe
	char * args[] = {(char *)"/proc/self/exe", NULL};

	int tempin, tempout;
	tempin = dup(0);
	tempout = dup(1);
	int pin[2], pout[2];
	//call pipe for both pipes
	pipe(pin);
	pipe(pout);
	dup2(pin[0], 0);
	dup2(pout[1], 1);
	close(pin[0]);
	close(pout[1]);

	//from parent: write to pin[1]: "command_line \n exit \n"
	write(pin[1], yylval.string_val, strlen(yylval.string_val));
	close(pin[1]);

	//fork child process
	int ret;
	ret = fork();
	if(ret == 0)
	{
		execvp("/proc/self/exe", args);
	}
	else if(ret < 0)
	{
		perror("subshell execvp");
		exit(1);
	}
	else
	{
		waitpid(ret, NULL, 0);
	}
	//restoring default stdin/stdout
	dup2(tempin, 0);
	dup2(tempout, 1);
	close(tempin);
	close(tempout);

	//subshell writes command output to pout[1]
	//read output from pout[0] into buffer (size 4096)
	read(pout[0], buffer, 4096);
	close(pout[0]);

	//buffer is correct here.
	//call myunputc(int c) from end of buffer to start(reversed)
	//ask ta about it
	for(int i = strlen(buffer) - 1; i >= 0; i--)
	{
		if(buffer[i] == '\n')
		{
			myunputc(' ');
		}
		else
		{
			myunputc(buffer[i]);
		}
	}
	memset(buffer, 0, 4096);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 315 "shell.l"
{
	//source:
	//////////////////
	//this section based on a stackoverflow post on how to split
	//a string into words based on whitespace delimiter
	string str = yytext;	
	string buf;                 // Have a buffer string
	stringstream ss(str);       // Insert the string into a stream

	vector<string> tokens; // Create vector to hold our words

	while (ss >> buf) 
	{
		tokens.push_back(buf);
	}

	string arg = tokens[1];
	///////////////////
	
	yyin = fopen(arg.c_str(), "r");
	if(!yyin)
	{
		fprintf(stderr, "myshell: %s\n", strerror(errno));
		yyin = stdin;
	}
	else
	{
		source = true;
		YY_BUFFER_STATE buffer = yy_create_buffer(yyin, YY_BUF_SIZE);
		yypush_buffer_state(buffer);
		yyparse();
	}
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 349 "shell.l"
{
	source = false;
	yypop_buffer_state();
	yyterminate();
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 355 "shell.l"
{
	//remove double quotes from text
	yylval.string_val = strdup(yytext);
	memcpy(yylval.string_val, &yytext[1], yyleng - 2);
	yylval.string_val[yyleng - 2] = '\0';
	yylval.cpp_string = new string(yylval.string_val);
	return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 364 "shell.l"
{
	//remove single quotes from text
	yylval.string_val = strdup(yytext);
	memcpy(yylval.string_val, &yytext[1], yyleng - 2);
	yylval.string_val[yyleng - 2] = '\0';
	yylval.cpp_string = new string(yylval.string_val);
	return WORD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 373 "shell.l"
{
	/* Assume that file names have only alpha chars */
	yylval.cpp_string = new string(yytext);
	int size = (int) yylval.cpp_string->size();
	for(int i = 0; i < size; i ++)
	{
		if(yylval.cpp_string[0][i] == '\\')
		{
			yylval.cpp_string->erase(i, 1);
		}
	}
	return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 386 "shell.l"
ECHO;
	YY_BREAK
#line 3161 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 523 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 523 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 522);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 386 "shell.l"
